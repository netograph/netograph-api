// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: proto/ngapi/userapi/user.proto

package userapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Metadata is arbitrary information associated with a capture.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key for this metadata pair. Keys do not have to be unique.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for this metadata pair.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Metadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatasetsRequest) Reset() {
	*x = DatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetsRequest) ProtoMessage() {}

func (x *DatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetsRequest.ProtoReflect.Descriptor instead.
func (*DatasetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{1}
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The dataset text description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The base URL under which this dataset's assets are exposed.
	Urlbase string `protobuf:"bytes,3,opt,name=urlbase,proto3" json:"urlbase,omitempty"`
	// Non-zero if the dataset has been deleted.
	Deleted *timestamp.Timestamp `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Is the current user restricted to readonly access? If so, capture
	// submission and other write operations will be denied.
	Readonly bool `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{2}
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dataset) GetUrlbase() string {
	if x != nil {
		return x.Urlbase
	}
	return ""
}

func (x *Dataset) GetDeleted() *timestamp.Timestamp {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *Dataset) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type TempCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification string      `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	Urls         []string    `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	Meta         []*Metadata `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
	Zone         string      `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// Extended capture includes full-page screenshot and page content formats
	Extended bool `protobuf:"varint,5,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *TempCaptureRequest) Reset() {
	*x = TempCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempCaptureRequest) ProtoMessage() {}

func (x *TempCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempCaptureRequest.ProtoReflect.Descriptor instead.
func (*TempCaptureRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{3}
}

func (x *TempCaptureRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *TempCaptureRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *TempCaptureRequest) GetMeta() []*Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TempCaptureRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *TempCaptureRequest) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

type TempCaptureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets string `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TempCaptureResult) Reset() {
	*x = TempCaptureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempCaptureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempCaptureResult) ProtoMessage() {}

func (x *TempCaptureResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempCaptureResult.ProtoReflect.Descriptor instead.
func (*TempCaptureResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{4}
}

func (x *TempCaptureResult) GetAssets() string {
	if x != nil {
		return x.Assets
	}
	return ""
}

func (x *TempCaptureResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Capture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification string      `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	Urls         []string    `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	Meta         []*Metadata `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
	Zone         string      `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// Extended capture includes full-page screenshot and page content formats
	Extended bool `protobuf:"varint,5,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *Capture) Reset() {
	*x = Capture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capture) ProtoMessage() {}

func (x *Capture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capture.ProtoReflect.Descriptor instead.
func (*Capture) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{5}
}

func (x *Capture) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *Capture) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Capture) GetMeta() []*Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Capture) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Capture) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

type CaptureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets string `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CaptureResult) Reset() {
	*x = CaptureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResult) ProtoMessage() {}

func (x *CaptureResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResult.ProtoReflect.Descriptor instead.
func (*CaptureResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{6}
}

func (x *CaptureResult) GetAssets() string {
	if x != nil {
		return x.Assets
	}
	return ""
}

func (x *CaptureResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Captures []*Capture `protobuf:"bytes,1,rep,name=captures,proto3" json:"captures,omitempty"`
}

func (x *CaptureRequest) Reset() {
	*x = CaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_userapi_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureRequest) ProtoMessage() {}

func (x *CaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_userapi_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureRequest.ProtoReflect.Descriptor instead.
func (*CaptureRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_userapi_user_proto_rawDescGZIP(), []int{7}
}

func (x *CaptureRequest) GetCaptures() []*Capture {
	if x != nil {
		return x.Captures
	}
	return nil
}

var File_proto_ngapi_userapi_user_proto protoreflect.FileDescriptor

var file_proto_ngapi_userapi_user_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x07,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x72, 0x6c, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x72, 0x6c, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x54, 0x65,
	0x6d, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x54, 0x65, 0x6d,
	0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x32, 0x82,
	0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ngapi_userapi_user_proto_rawDescOnce sync.Once
	file_proto_ngapi_userapi_user_proto_rawDescData = file_proto_ngapi_userapi_user_proto_rawDesc
)

func file_proto_ngapi_userapi_user_proto_rawDescGZIP() []byte {
	file_proto_ngapi_userapi_user_proto_rawDescOnce.Do(func() {
		file_proto_ngapi_userapi_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ngapi_userapi_user_proto_rawDescData)
	})
	return file_proto_ngapi_userapi_user_proto_rawDescData
}

var file_proto_ngapi_userapi_user_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_ngapi_userapi_user_proto_goTypes = []interface{}{
	(*Metadata)(nil),            // 0: io.netograph.user.Metadata
	(*DatasetsRequest)(nil),     // 1: io.netograph.user.DatasetsRequest
	(*Dataset)(nil),             // 2: io.netograph.user.Dataset
	(*TempCaptureRequest)(nil),  // 3: io.netograph.user.TempCaptureRequest
	(*TempCaptureResult)(nil),   // 4: io.netograph.user.TempCaptureResult
	(*Capture)(nil),             // 5: io.netograph.user.Capture
	(*CaptureResult)(nil),       // 6: io.netograph.user.CaptureResult
	(*CaptureRequest)(nil),      // 7: io.netograph.user.CaptureRequest
	(*timestamp.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_proto_ngapi_userapi_user_proto_depIdxs = []int32{
	8, // 0: io.netograph.user.Dataset.deleted:type_name -> google.protobuf.Timestamp
	0, // 1: io.netograph.user.TempCaptureRequest.meta:type_name -> io.netograph.user.Metadata
	0, // 2: io.netograph.user.Capture.meta:type_name -> io.netograph.user.Metadata
	5, // 3: io.netograph.user.CaptureRequest.captures:type_name -> io.netograph.user.Capture
	3, // 4: io.netograph.user.User.TempCapture:input_type -> io.netograph.user.TempCaptureRequest
	7, // 5: io.netograph.user.User.Capture:input_type -> io.netograph.user.CaptureRequest
	1, // 6: io.netograph.user.User.Datasets:input_type -> io.netograph.user.DatasetsRequest
	4, // 7: io.netograph.user.User.TempCapture:output_type -> io.netograph.user.TempCaptureResult
	6, // 8: io.netograph.user.User.Capture:output_type -> io.netograph.user.CaptureResult
	2, // 9: io.netograph.user.User.Datasets:output_type -> io.netograph.user.Dataset
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_ngapi_userapi_user_proto_init() }
func file_proto_ngapi_userapi_user_proto_init() {
	if File_proto_ngapi_userapi_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ngapi_userapi_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempCaptureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_userapi_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ngapi_userapi_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ngapi_userapi_user_proto_goTypes,
		DependencyIndexes: file_proto_ngapi_userapi_user_proto_depIdxs,
		MessageInfos:      file_proto_ngapi_userapi_user_proto_msgTypes,
	}.Build()
	File_proto_ngapi_userapi_user_proto = out.File
	file_proto_ngapi_userapi_user_proto_rawDesc = nil
	file_proto_ngapi_userapi_user_proto_goTypes = nil
	file_proto_ngapi_userapi_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	// Request a temporary capture. Temporary captures are not stored in a
	// dataset, and the capture assets will be available for download for 24
	// hours before being deleted.
	TempCapture(ctx context.Context, in *TempCaptureRequest, opts ...grpc.CallOption) (*TempCaptureResult, error)
	// Bulk request captures. The capture assets will be available for download
	// for 24 hours before being deleted.
	Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (User_CaptureClient, error)
	// List all datasets to which the authorizing account has access. This
	// includes public datasets, which will be marked readonly.
	Datasets(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (User_DatasetsClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) TempCapture(ctx context.Context, in *TempCaptureRequest, opts ...grpc.CallOption) (*TempCaptureResult, error) {
	out := new(TempCaptureResult)
	err := c.cc.Invoke(ctx, "/io.netograph.user.User/TempCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (User_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/io.netograph.user.User/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &userCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_CaptureClient interface {
	Recv() (*CaptureResult, error)
	grpc.ClientStream
}

type userCaptureClient struct {
	grpc.ClientStream
}

func (x *userCaptureClient) Recv() (*CaptureResult, error) {
	m := new(CaptureResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) Datasets(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (User_DatasetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[1], "/io.netograph.user.User/Datasets", opts...)
	if err != nil {
		return nil, err
	}
	x := &userDatasetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_DatasetsClient interface {
	Recv() (*Dataset, error)
	grpc.ClientStream
}

type userDatasetsClient struct {
	grpc.ClientStream
}

func (x *userDatasetsClient) Recv() (*Dataset, error) {
	m := new(Dataset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// Request a temporary capture. Temporary captures are not stored in a
	// dataset, and the capture assets will be available for download for 24
	// hours before being deleted.
	TempCapture(context.Context, *TempCaptureRequest) (*TempCaptureResult, error)
	// Bulk request captures. The capture assets will be available for download
	// for 24 hours before being deleted.
	Capture(*CaptureRequest, User_CaptureServer) error
	// List all datasets to which the authorizing account has access. This
	// includes public datasets, which will be marked readonly.
	Datasets(*DatasetsRequest, User_DatasetsServer) error
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) TempCapture(context.Context, *TempCaptureRequest) (*TempCaptureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TempCapture not implemented")
}
func (*UnimplementedUserServer) Capture(*CaptureRequest, User_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (*UnimplementedUserServer) Datasets(*DatasetsRequest, User_DatasetsServer) error {
	return status.Errorf(codes.Unimplemented, "method Datasets not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_TempCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).TempCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.user.User/TempCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).TempCapture(ctx, req.(*TempCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).Capture(m, &userCaptureServer{stream})
}

type User_CaptureServer interface {
	Send(*CaptureResult) error
	grpc.ServerStream
}

type userCaptureServer struct {
	grpc.ServerStream
}

func (x *userCaptureServer) Send(m *CaptureResult) error {
	return x.ServerStream.SendMsg(m)
}

func _User_Datasets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).Datasets(m, &userDatasetsServer{stream})
}

type User_DatasetsServer interface {
	Send(*Dataset) error
	grpc.ServerStream
}

type userDatasetsServer struct {
	grpc.ServerStream
}

func (x *userDatasetsServer) Send(m *Dataset) error {
	return x.ServerStream.SendMsg(m)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.netograph.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TempCapture",
			Handler:    _User_TempCapture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _User_Capture_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Datasets",
			Handler:       _User_Datasets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ngapi/userapi/user.proto",
}
