// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: proto/ngapi/dsetapi/dset.proto

package dsetapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authoritykeyid string `protobuf:"bytes,1,opt,name=authoritykeyid,proto3" json:"authoritykeyid,omitempty"`
	// Basic Constraints extension
	Basicconstraints *Cert_BasicConstraints `protobuf:"bytes,2,opt,name=basicconstraints,proto3" json:"basicconstraints,omitempty"`
	// CRL Distribution Points extension
	Crldistributionpoints []string `protobuf:"bytes,3,rep,name=crldistributionpoints,proto3" json:"crldistributionpoints,omitempty"`
	// Subject Alternate Names extension
	Dnsnames       []string `protobuf:"bytes,4,rep,name=dnsnames,proto3" json:"dnsnames,omitempty"`
	Emailaddresses []string `protobuf:"bytes,5,rep,name=emailaddresses,proto3" json:"emailaddresses,omitempty"`
	// ExtendedKeyUsage extension
	Extendedkeyusage []string          `protobuf:"bytes,6,rep,name=extendedkeyusage,proto3" json:"extendedkeyusage,omitempty"`
	Extensions       []*Cert_Extension `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Fingerprints     map[string]string `protobuf:"bytes,8,rep,name=fingerprints,proto3" json:"fingerprints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Subject Alternate Names extension
	Ipaddresses []string                `protobuf:"bytes,9,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
	Issuer      *Cert_DistinguishedName `protobuf:"bytes,10,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// RFC 5280, 4.2.2.1 (Authority Information Access
	Issuingcerturl []string `protobuf:"bytes,11,rep,name=issuingcerturl,proto3" json:"issuingcerturl,omitempty"`
	// Key Usage extension
	Keyusage  []string             `protobuf:"bytes,12,rep,name=keyusage,proto3" json:"keyusage,omitempty"`
	Notafter  *timestamp.Timestamp `protobuf:"bytes,13,opt,name=notafter,proto3" json:"notafter,omitempty"`
	Notbefore *timestamp.Timestamp `protobuf:"bytes,14,opt,name=notbefore,proto3" json:"notbefore,omitempty"`
	// RFC 5280, 4.2.2.1 (Authority Information Access
	Ocspserver                  []string                `protobuf:"bytes,15,rep,name=ocspserver,proto3" json:"ocspserver,omitempty"`
	Permitteddnsdomains         []string                `protobuf:"bytes,16,rep,name=permitteddnsdomains,proto3" json:"permitteddnsdomains,omitempty"`
	Permitteddnsdomainscritical bool                    `protobuf:"varint,17,opt,name=permitteddnsdomainscritical,proto3" json:"permitteddnsdomainscritical,omitempty"`
	Publickey                   map[string]string       `protobuf:"bytes,18,rep,name=publickey,proto3" json:"publickey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Publickeyalgorithm          string                  `protobuf:"bytes,19,opt,name=publickeyalgorithm,proto3" json:"publickeyalgorithm,omitempty"`
	Serialnumber                string                  `protobuf:"bytes,20,opt,name=serialnumber,proto3" json:"serialnumber,omitempty"`
	Signaturealgorithm          string                  `protobuf:"bytes,21,opt,name=signaturealgorithm,proto3" json:"signaturealgorithm,omitempty"`
	Subject                     *Cert_DistinguishedName `protobuf:"bytes,22,opt,name=subject,proto3" json:"subject,omitempty"`
	Subjectkeyid                string                  `protobuf:"bytes,23,opt,name=subjectkeyid,proto3" json:"subjectkeyid,omitempty"`
	Version                     int64                   `protobuf:"varint,24,opt,name=version,proto3" json:"version,omitempty"`
	Analysis                    *Cert_Analysis          `protobuf:"bytes,25,opt,name=analysis,proto3" json:"analysis,omitempty"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{0}
}

func (x *Cert) GetAuthoritykeyid() string {
	if x != nil {
		return x.Authoritykeyid
	}
	return ""
}

func (x *Cert) GetBasicconstraints() *Cert_BasicConstraints {
	if x != nil {
		return x.Basicconstraints
	}
	return nil
}

func (x *Cert) GetCrldistributionpoints() []string {
	if x != nil {
		return x.Crldistributionpoints
	}
	return nil
}

func (x *Cert) GetDnsnames() []string {
	if x != nil {
		return x.Dnsnames
	}
	return nil
}

func (x *Cert) GetEmailaddresses() []string {
	if x != nil {
		return x.Emailaddresses
	}
	return nil
}

func (x *Cert) GetExtendedkeyusage() []string {
	if x != nil {
		return x.Extendedkeyusage
	}
	return nil
}

func (x *Cert) GetExtensions() []*Cert_Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Cert) GetFingerprints() map[string]string {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *Cert) GetIpaddresses() []string {
	if x != nil {
		return x.Ipaddresses
	}
	return nil
}

func (x *Cert) GetIssuer() *Cert_DistinguishedName {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Cert) GetIssuingcerturl() []string {
	if x != nil {
		return x.Issuingcerturl
	}
	return nil
}

func (x *Cert) GetKeyusage() []string {
	if x != nil {
		return x.Keyusage
	}
	return nil
}

func (x *Cert) GetNotafter() *timestamp.Timestamp {
	if x != nil {
		return x.Notafter
	}
	return nil
}

func (x *Cert) GetNotbefore() *timestamp.Timestamp {
	if x != nil {
		return x.Notbefore
	}
	return nil
}

func (x *Cert) GetOcspserver() []string {
	if x != nil {
		return x.Ocspserver
	}
	return nil
}

func (x *Cert) GetPermitteddnsdomains() []string {
	if x != nil {
		return x.Permitteddnsdomains
	}
	return nil
}

func (x *Cert) GetPermitteddnsdomainscritical() bool {
	if x != nil {
		return x.Permitteddnsdomainscritical
	}
	return false
}

func (x *Cert) GetPublickey() map[string]string {
	if x != nil {
		return x.Publickey
	}
	return nil
}

func (x *Cert) GetPublickeyalgorithm() string {
	if x != nil {
		return x.Publickeyalgorithm
	}
	return ""
}

func (x *Cert) GetSerialnumber() string {
	if x != nil {
		return x.Serialnumber
	}
	return ""
}

func (x *Cert) GetSignaturealgorithm() string {
	if x != nil {
		return x.Signaturealgorithm
	}
	return ""
}

func (x *Cert) GetSubject() *Cert_DistinguishedName {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Cert) GetSubjectkeyid() string {
	if x != nil {
		return x.Subjectkeyid
	}
	return ""
}

func (x *Cert) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Cert) GetAnalysis() *Cert_Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

// A capture summary - this is the data that you will receive for any query that
// returns captures.
type CapSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique ID for this capture.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The URL under which this capture's static assets can be found.
	Assets string `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets,omitempty"`
	// The roots for each URL in the capture plan.
	Roots []*CapSummary_Root `protobuf:"bytes,3,rep,name=roots,proto3" json:"roots,omitempty"`
	// The time of capture.
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The capture plan.
	Plan *CapSummary_Plan `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	// Some basic statistics on the resulting capture.
	Stats *CapSummary_Stats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *CapSummary) Reset() {
	*x = CapSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapSummary) ProtoMessage() {}

func (x *CapSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapSummary.ProtoReflect.Descriptor instead.
func (*CapSummary) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{1}
}

func (x *CapSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CapSummary) GetAssets() string {
	if x != nil {
		return x.Assets
	}
	return ""
}

func (x *CapSummary) GetRoots() []*CapSummary_Root {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *CapSummary) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CapSummary) GetPlan() *CapSummary_Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *CapSummary) GetStats() *CapSummary_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Metadata is arbitrary information associated with a capture.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key for this metadata pair. Keys do not have to be unique.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for this metadata pair.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Metadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CaptureInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// The unique ID of the capture.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CaptureInfoRequest) Reset() {
	*x = CaptureInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfoRequest) ProtoMessage() {}

func (x *CaptureInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfoRequest.ProtoReflect.Descriptor instead.
func (*CaptureInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{3}
}

func (x *CaptureInfoRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CaptureInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CaptureInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *CaptureInfoResult) Reset() {
	*x = CaptureInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfoResult) ProtoMessage() {}

func (x *CaptureInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfoResult.ProtoReflect.Descriptor instead.
func (*CaptureInfoResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureInfoResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type CaptureTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// The unique ID of the capture.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CaptureTextRequest) Reset() {
	*x = CaptureTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextRequest) ProtoMessage() {}

func (x *CaptureTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextRequest.ProtoReflect.Descriptor instead.
func (*CaptureTextRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{5}
}

func (x *CaptureTextRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CaptureTextRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CaptureTextResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages  []*CaptureTextResult_Page  `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
	Groups []*CaptureTextResult_Group `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *CaptureTextResult) Reset() {
	*x = CaptureTextResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult) ProtoMessage() {}

func (x *CaptureTextResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult.ProtoReflect.Descriptor instead.
func (*CaptureTextResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6}
}

func (x *CaptureTextResult) GetPages() []*CaptureTextResult_Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *CaptureTextResult) GetGroups() []*CaptureTextResult_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CaptureLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	// The capture log is in reverse chronological order, so the start of the
	// range is the most recent time. If start is zero, it's taken to be the
	// largest possible time value.
	Start *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// The capture log is in reverse chronological order, so the end of the
	// range is the least recent time. If end is zero, it's taken to be the
	// smallest possible time value.
	End *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CaptureLogRequest) Reset() {
	*x = CaptureLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureLogRequest) ProtoMessage() {}

func (x *CaptureLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureLogRequest.ProtoReflect.Descriptor instead.
func (*CaptureLogRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{7}
}

func (x *CaptureLogRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CaptureLogRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CaptureLogRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *CaptureLogRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CaptureLogRequest) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type CaptureLogResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CaptureLogResult) Reset() {
	*x = CaptureLogResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureLogResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureLogResult) ProtoMessage() {}

func (x *CaptureLogResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureLogResult.ProtoReflect.Descriptor instead.
func (*CaptureLogResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{8}
}

func (x *CaptureLogResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

func (x *CaptureLogResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertDomainSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// If true, results for the base domain is returned. Otherwise, the
	// result for the exact domain is returned.
	Basedomain bool `protobuf:"varint,3,opt,name=basedomain,proto3" json:"basedomain,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertDomainSearchRequest) Reset() {
	*x = CertDomainSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertDomainSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertDomainSearchRequest) ProtoMessage() {}

func (x *CertDomainSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertDomainSearchRequest.ProtoReflect.Descriptor instead.
func (*CertDomainSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{9}
}

func (x *CertDomainSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CertDomainSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CertDomainSearchRequest) GetBasedomain() bool {
	if x != nil {
		return x.Basedomain
	}
	return false
}

func (x *CertDomainSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertDomainSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertDomainSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A matching certificate.
	Cert *Cert `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	// Fingerprints for certificates in the chain.
	Chain []string `protobuf:"bytes,4,rep,name=chain,proto3" json:"chain,omitempty"`
	// The most recent capture where this cert was observed.
	Latestcapture *CapSummary `protobuf:"bytes,5,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// The first capture where this cert was observed.
	Firstcapture *CapSummary `protobuf:"bytes,6,opt,name=firstcapture,proto3" json:"firstcapture,omitempty"`
}

func (x *CertDomainSearchResult) Reset() {
	*x = CertDomainSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertDomainSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertDomainSearchResult) ProtoMessage() {}

func (x *CertDomainSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertDomainSearchResult.ProtoReflect.Descriptor instead.
func (*CertDomainSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{10}
}

func (x *CertDomainSearchResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CertDomainSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *CertDomainSearchResult) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertDomainSearchResult) GetChain() []string {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *CertDomainSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *CertDomainSearchResult) GetFirstcapture() *CapSummary {
	if x != nil {
		return x.Firstcapture
	}
	return nil
}

type CertIPSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    int32  `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertIPSearchRequest) Reset() {
	*x = CertIPSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertIPSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertIPSearchRequest) ProtoMessage() {}

func (x *CertIPSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertIPSearchRequest.ProtoReflect.Descriptor instead.
func (*CertIPSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{11}
}

func (x *CertIPSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CertIPSearchRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CertIPSearchRequest) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *CertIPSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertIPSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertIPSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// The most recent capture where this tag was observed.
	Latestcapture *CapSummary `protobuf:"bytes,2,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// The first capture where this tag was observed.
	Firstcapture *CapSummary `protobuf:"bytes,3,opt,name=firstcapture,proto3" json:"firstcapture,omitempty"`
	// The latest capture relevant to this result.
	Cert *Cert `protobuf:"bytes,4,opt,name=cert,proto3" json:"cert,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertIPSearchResult) Reset() {
	*x = CertIPSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertIPSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertIPSearchResult) ProtoMessage() {}

func (x *CertIPSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertIPSearchResult.ProtoReflect.Descriptor instead.
func (*CertIPSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{12}
}

func (x *CertIPSearchResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CertIPSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *CertIPSearchResult) GetFirstcapture() *CapSummary {
	if x != nil {
		return x.Firstcapture
	}
	return nil
}

func (x *CertIPSearchResult) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertIPSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Field   string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Text    string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertSearchRequest) Reset() {
	*x = CertSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertSearchRequest) ProtoMessage() {}

func (x *CertSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertSearchRequest.ProtoReflect.Descriptor instead.
func (*CertSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{13}
}

func (x *CertSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CertSearchRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *CertSearchRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CertSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,1,opt,name=resume,proto3" json:"resume,omitempty"`
	// The latest capture relevant to this result.
	Cert *Cert                `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Time *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *CertSearchResult) Reset() {
	*x = CertSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertSearchResult) ProtoMessage() {}

func (x *CertSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertSearchResult.ProtoReflect.Descriptor instead.
func (*CertSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{14}
}

func (x *CertSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *CertSearchResult) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertSearchResult) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type CertValidNamesSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com". Wildcard notation is permitted to match wildcard valid
	// names - e.g. "*.google.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertValidNamesSearchRequest) Reset() {
	*x = CertValidNamesSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertValidNamesSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertValidNamesSearchRequest) ProtoMessage() {}

func (x *CertValidNamesSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertValidNamesSearchRequest.ProtoReflect.Descriptor instead.
func (*CertValidNamesSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{15}
}

func (x *CertValidNamesSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *CertValidNamesSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CertValidNamesSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CertValidNamesSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type CertValidNamesSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A matching certificate.
	Cert *Cert `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// Fingerprints for certificates in the chain.
	Chain []string `protobuf:"bytes,3,rep,name=chain,proto3" json:"chain,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *CertValidNamesSearchResult) Reset() {
	*x = CertValidNamesSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertValidNamesSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertValidNamesSearchResult) ProtoMessage() {}

func (x *CertValidNamesSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertValidNamesSearchResult.ProtoReflect.Descriptor instead.
func (*CertValidNamesSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{16}
}

func (x *CertValidNamesSearchResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CertValidNamesSearchResult) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertValidNamesSearchResult) GetChain() []string {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *CertValidNamesSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Domain  string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DomainHistoryRequest) Reset() {
	*x = DomainHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainHistoryRequest) ProtoMessage() {}

func (x *DomainHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainHistoryRequest.ProtoReflect.Descriptor instead.
func (*DomainHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{17}
}

func (x *DomainHistoryRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainHistoryRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainHistoryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DomainHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *DomainHistoryResult) Reset() {
	*x = DomainHistoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainHistoryResult) ProtoMessage() {}

func (x *DomainHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainHistoryResult.ProtoReflect.Descriptor instead.
func (*DomainHistoryResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{18}
}

func (x *DomainHistoryResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type DomainIDCaptureTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// The capture ID to retrieve.
	Captureid string `protobuf:"bytes,3,opt,name=captureid,proto3" json:"captureid,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDCaptureTagsRequest) Reset() {
	*x = DomainIDCaptureTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDCaptureTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDCaptureTagsRequest) ProtoMessage() {}

func (x *DomainIDCaptureTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDCaptureTagsRequest.ProtoReflect.Descriptor instead.
func (*DomainIDCaptureTagsRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{19}
}

func (x *DomainIDCaptureTagsRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainIDCaptureTagsRequest) GetCaptureid() string {
	if x != nil {
		return x.Captureid
	}
	return ""
}

func (x *DomainIDCaptureTagsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DomainIDCaptureTagsRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainIDCaptureTagsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDCaptureTagsResult) Reset() {
	*x = DomainIDCaptureTagsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDCaptureTagsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDCaptureTagsResult) ProtoMessage() {}

func (x *DomainIDCaptureTagsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDCaptureTagsResult.ProtoReflect.Descriptor instead.
func (*DomainIDCaptureTagsResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{20}
}

func (x *DomainIDCaptureTagsResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainIDCaptureTagsResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainIDCaptureTagsResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainIDCaptureTagsResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainIDDomainSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// If true, the log for the base domain is returned. Otherwise, the
	// result for the exact domain is returned.
	Basedomain bool `protobuf:"varint,2,opt,name=basedomain,proto3" json:"basedomain,omitempty"`
	// The domain to search for.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Restrict the results to a given key. Optional.
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// Restrict the results to a given value. Only valid if key is passed. Optional.
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,7,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDDomainSearchRequest) Reset() {
	*x = DomainIDDomainSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDDomainSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDDomainSearchRequest) ProtoMessage() {}

func (x *DomainIDDomainSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDDomainSearchRequest.ProtoReflect.Descriptor instead.
func (*DomainIDDomainSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{21}
}

func (x *DomainIDDomainSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainIDDomainSearchRequest) GetBasedomain() bool {
	if x != nil {
		return x.Basedomain
	}
	return false
}

func (x *DomainIDDomainSearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainIDDomainSearchRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainIDDomainSearchRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainIDDomainSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DomainIDDomainSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainIDDomainSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The most recent capture where this tag was observed.
	Latestcapture *CapSummary `protobuf:"bytes,4,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// The first capture where this tag was observed.
	Firstcapture *CapSummary `protobuf:"bytes,5,opt,name=firstcapture,proto3" json:"firstcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDDomainSearchResult) Reset() {
	*x = DomainIDDomainSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDDomainSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDDomainSearchResult) ProtoMessage() {}

func (x *DomainIDDomainSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDDomainSearchResult.ProtoReflect.Descriptor instead.
func (*DomainIDDomainSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{22}
}

func (x *DomainIDDomainSearchResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainIDDomainSearchResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainIDDomainSearchResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainIDDomainSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *DomainIDDomainSearchResult) GetFirstcapture() *CapSummary {
	if x != nil {
		return x.Firstcapture
	}
	return nil
}

func (x *DomainIDDomainSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainIDTagSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// If true, the log for the base domain is returned. Otherwise, the
	// result for the exact domain is returned.
	Basedomain bool `protobuf:"varint,2,opt,name=basedomain,proto3" json:"basedomain,omitempty"`
	// The key to search for.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Restrict the results to a given value. Optional.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Restrict the result to a given domain. Only valid if value is passed.
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,7,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDTagSearchRequest) Reset() {
	*x = DomainIDTagSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDTagSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDTagSearchRequest) ProtoMessage() {}

func (x *DomainIDTagSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDTagSearchRequest.ProtoReflect.Descriptor instead.
func (*DomainIDTagSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{23}
}

func (x *DomainIDTagSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainIDTagSearchRequest) GetBasedomain() bool {
	if x != nil {
		return x.Basedomain
	}
	return false
}

func (x *DomainIDTagSearchRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainIDTagSearchRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainIDTagSearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainIDTagSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DomainIDTagSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainIDTagSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The most recent capture where this tag was observed.
	Latestcapture *CapSummary `protobuf:"bytes,4,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// The first capture where this tag was observed.
	Firstcapture *CapSummary `protobuf:"bytes,5,opt,name=firstcapture,proto3" json:"firstcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainIDTagSearchResult) Reset() {
	*x = DomainIDTagSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainIDTagSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainIDTagSearchResult) ProtoMessage() {}

func (x *DomainIDTagSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainIDTagSearchResult.ProtoReflect.Descriptor instead.
func (*DomainIDTagSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{24}
}

func (x *DomainIDTagSearchResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainIDTagSearchResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainIDTagSearchResult) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainIDTagSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *DomainIDTagSearchResult) GetFirstcapture() *CapSummary {
	if x != nil {
		return x.Firstcapture
	}
	return nil
}

func (x *DomainIDTagSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainSearchRequest) Reset() {
	*x = DomainSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSearchRequest) ProtoMessage() {}

func (x *DomainSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSearchRequest.ProtoReflect.Descriptor instead.
func (*DomainSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{25}
}

func (x *DomainSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DomainSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DomainSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
}

func (x *DomainSearchResult) Reset() {
	*x = DomainSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSearchResult) ProtoMessage() {}

func (x *DomainSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSearchResult.ProtoReflect.Descriptor instead.
func (*DomainSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{26}
}

func (x *DomainSearchResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *DomainSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

type DomainsForIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    int32  `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainsForIPRequest) Reset() {
	*x = DomainsForIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainsForIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainsForIPRequest) ProtoMessage() {}

func (x *DomainsForIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainsForIPRequest.ProtoReflect.Descriptor instead.
func (*DomainsForIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{27}
}

func (x *DomainsForIPRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DomainsForIPRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DomainsForIPRequest) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *DomainsForIPRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DomainsForIPRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type DomainsForIPResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	Associations  []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *DomainsForIPResult) Reset() {
	*x = DomainsForIPResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainsForIPResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainsForIPResult) ProtoMessage() {}

func (x *DomainsForIPResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainsForIPResult.ProtoReflect.Descriptor instead.
func (*DomainsForIPResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{28}
}

func (x *DomainsForIPResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainsForIPResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DomainsForIPResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *DomainsForIPResult) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *DomainsForIPResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type IPHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *IPHistoryRequest) Reset() {
	*x = IPHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPHistoryRequest) ProtoMessage() {}

func (x *IPHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPHistoryRequest.ProtoReflect.Descriptor instead.
func (*IPHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{29}
}

func (x *IPHistoryRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *IPHistoryRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPHistoryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IPHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *IPHistoryResult) Reset() {
	*x = IPHistoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPHistoryResult) ProtoMessage() {}

func (x *IPHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPHistoryResult.ProtoReflect.Descriptor instead.
func (*IPHistoryResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{30}
}

func (x *IPHistoryResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type IPLogSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    int32  `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *IPLogSearchRequest) Reset() {
	*x = IPLogSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPLogSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPLogSearchRequest) ProtoMessage() {}

func (x *IPLogSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPLogSearchRequest.ProtoReflect.Descriptor instead.
func (*IPLogSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{31}
}

func (x *IPLogSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *IPLogSearchRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPLogSearchRequest) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *IPLogSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *IPLogSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type IPLogSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,1,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Ip         string      `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *IPLogSearchResult) Reset() {
	*x = IPLogSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPLogSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPLogSearchResult) ProtoMessage() {}

func (x *IPLogSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPLogSearchResult.ProtoReflect.Descriptor instead.
func (*IPLogSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{32}
}

func (x *IPLogSearchResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

func (x *IPLogSearchResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPLogSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type IPSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
}

func (x *IPSearchResult) Reset() {
	*x = IPSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSearchResult) ProtoMessage() {}

func (x *IPSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSearchResult.ProtoReflect.Descriptor instead.
func (*IPSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{33}
}

func (x *IPSearchResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *IPSearchResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

type IPSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    int32  `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *IPSearchRequest) Reset() {
	*x = IPSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSearchRequest) ProtoMessage() {}

func (x *IPSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSearchRequest.ProtoReflect.Descriptor instead.
func (*IPSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{34}
}

func (x *IPSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *IPSearchRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPSearchRequest) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *IPSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *IPSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type IPsForDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *IPsForDomainRequest) Reset() {
	*x = IPsForDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsForDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsForDomainRequest) ProtoMessage() {}

func (x *IPsForDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsForDomainRequest.ProtoReflect.Descriptor instead.
func (*IPsForDomainRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{35}
}

func (x *IPsForDomainRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *IPsForDomainRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *IPsForDomainRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *IPsForDomainRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type IPsForDomainResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	Associations  []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *IPsForDomainResult) Reset() {
	*x = IPsForDomainResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsForDomainResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsForDomainResult) ProtoMessage() {}

func (x *IPsForDomainResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsForDomainResult.ProtoReflect.Descriptor instead.
func (*IPsForDomainResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{36}
}

func (x *IPsForDomainResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *IPsForDomainResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPsForDomainResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *IPsForDomainResult) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *IPsForDomainResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type MetaForCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// The ID of the capture
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
	// An optional key prefix
	Prefix string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *MetaForCaptureRequest) Reset() {
	*x = MetaForCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaForCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaForCaptureRequest) ProtoMessage() {}

func (x *MetaForCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaForCaptureRequest.ProtoReflect.Descriptor instead.
func (*MetaForCaptureRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{37}
}

func (x *MetaForCaptureRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *MetaForCaptureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetaForCaptureRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MetaForCaptureRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *MetaForCaptureRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type MetaForCaptureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Metadata            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *MetaForCaptureResult) Reset() {
	*x = MetaForCaptureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaForCaptureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaForCaptureResult) ProtoMessage() {}

func (x *MetaForCaptureResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaForCaptureResult.ProtoReflect.Descriptor instead.
func (*MetaForCaptureResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{38}
}

func (x *MetaForCaptureResult) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MetaForCaptureResult) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetaForCaptureResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type MetaSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *MetaSearchRequest) Reset() {
	*x = MetaSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSearchRequest) ProtoMessage() {}

func (x *MetaSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSearchRequest.ProtoReflect.Descriptor instead.
func (*MetaSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{39}
}

func (x *MetaSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *MetaSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MetaSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MetaSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type MetaSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,4,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *MetaSearchResult) Reset() {
	*x = MetaSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSearchResult) ProtoMessage() {}

func (x *MetaSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSearchResult.ProtoReflect.Descriptor instead.
func (*MetaSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{40}
}

func (x *MetaSearchResult) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MetaSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *MetaSearchResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type RedirsByDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RedirsByDestinationRequest) Reset() {
	*x = RedirsByDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirsByDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirsByDestinationRequest) ProtoMessage() {}

func (x *RedirsByDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirsByDestinationRequest.ProtoReflect.Descriptor instead.
func (*RedirsByDestinationRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{41}
}

func (x *RedirsByDestinationRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *RedirsByDestinationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RedirsByDestinationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RedirsByDestinationRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RedirsByDestinationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RedirsByDestinationResult) Reset() {
	*x = RedirsByDestinationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirsByDestinationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirsByDestinationResult) ProtoMessage() {}

func (x *RedirsByDestinationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirsByDestinationResult.ProtoReflect.Descriptor instead.
func (*RedirsByDestinationResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{42}
}

func (x *RedirsByDestinationResult) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RedirsByDestinationResult) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RedirsByDestinationResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *RedirsByDestinationResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RedirsBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RedirsBySourceRequest) Reset() {
	*x = RedirsBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirsBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirsBySourceRequest) ProtoMessage() {}

func (x *RedirsBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirsBySourceRequest.ProtoReflect.Descriptor instead.
func (*RedirsBySourceRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{43}
}

func (x *RedirsBySourceRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *RedirsBySourceRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RedirsBySourceRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RedirsBySourceRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RedirsBySourceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// The latest capture relevant to this result.
	Latestcapture *CapSummary `protobuf:"bytes,3,opt,name=latestcapture,proto3" json:"latestcapture,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RedirsBySourceResult) Reset() {
	*x = RedirsBySourceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirsBySourceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirsBySourceResult) ProtoMessage() {}

func (x *RedirsBySourceResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirsBySourceResult.ProtoReflect.Descriptor instead.
func (*RedirsBySourceResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{44}
}

func (x *RedirsBySourceResult) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RedirsBySourceResult) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RedirsBySourceResult) GetLatestcapture() *CapSummary {
	if x != nil {
		return x.Latestcapture
	}
	return nil
}

func (x *RedirsBySourceResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RootLogSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RootLogSearchRequest) Reset() {
	*x = RootLogSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootLogSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootLogSearchRequest) ProtoMessage() {}

func (x *RootLogSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootLogSearchRequest.ProtoReflect.Descriptor instead.
func (*RootLogSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{45}
}

func (x *RootLogSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *RootLogSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RootLogSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RootLogSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RootLogSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *RootLogSearchResult) Reset() {
	*x = RootLogSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootLogSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootLogSearchResult) ProtoMessage() {}

func (x *RootLogSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootLogSearchResult.ProtoReflect.Descriptor instead.
func (*RootLogSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{46}
}

func (x *RootLogSearchResult) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RootLogSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *RootLogSearchResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type RootsForSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RootsForSatelliteRequest) Reset() {
	*x = RootsForSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootsForSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootsForSatelliteRequest) ProtoMessage() {}

func (x *RootsForSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootsForSatelliteRequest.ProtoReflect.Descriptor instead.
func (*RootsForSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{47}
}

func (x *RootsForSatelliteRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *RootsForSatelliteRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RootsForSatelliteRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RootsForSatelliteRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type RootsForSatelliteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Satellite string `protobuf:"bytes,2,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A capture summary for this result.
	Capsummary   *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Associations []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *RootsForSatelliteResult) Reset() {
	*x = RootsForSatelliteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootsForSatelliteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootsForSatelliteResult) ProtoMessage() {}

func (x *RootsForSatelliteResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootsForSatelliteResult.ProtoReflect.Descriptor instead.
func (*RootsForSatelliteResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{48}
}

func (x *RootsForSatelliteResult) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RootsForSatelliteResult) GetSatellite() string {
	if x != nil {
		return x.Satellite
	}
	return ""
}

func (x *RootsForSatelliteResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

func (x *RootsForSatelliteResult) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *RootsForSatelliteResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type SubmitCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A URL to which a notification will be posted when capture completes
	Notification string `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	// A sequence of URLs to visit in order
	Urls []string `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	// Metadata to associate with the capture
	Meta []*Metadata `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	// Skip capture if we've seen this exact URL within a specified number of seconds
	Skiprecent int64 `protobuf:"varint,5,opt,name=skiprecent,proto3" json:"skiprecent,omitempty"`
	// Capture zone - "us" or "eu". If unspecified, we choose based on availability.
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	// Extended capture includes full-page screenshot and page content formats
	Extended bool `protobuf:"varint,7,opt,name=extended,proto3" json:"extended,omitempty"`
	// Skip capture if we've seen the domain for this URL within a specified number of seconds
	Skiprecentdomain int64 `protobuf:"varint,8,opt,name=skiprecentdomain,proto3" json:"skiprecentdomain,omitempty"`
}

func (x *SubmitCaptureRequest) Reset() {
	*x = SubmitCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCaptureRequest) ProtoMessage() {}

func (x *SubmitCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCaptureRequest.ProtoReflect.Descriptor instead.
func (*SubmitCaptureRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{49}
}

func (x *SubmitCaptureRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *SubmitCaptureRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *SubmitCaptureRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *SubmitCaptureRequest) GetMeta() []*Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubmitCaptureRequest) GetSkiprecent() int64 {
	if x != nil {
		return x.Skiprecent
	}
	return 0
}

func (x *SubmitCaptureRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *SubmitCaptureRequest) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

func (x *SubmitCaptureRequest) GetSkiprecentdomain() int64 {
	if x != nil {
		return x.Skiprecentdomain
	}
	return 0
}

type SubmitCaptureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A URL under which capture assets may be found
	Assets string `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	// Was capture skipped due to a skiprecent specification?
	Skipped bool `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// The capture ID
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubmitCaptureResult) Reset() {
	*x = SubmitCaptureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCaptureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCaptureResult) ProtoMessage() {}

func (x *SubmitCaptureResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCaptureResult.ProtoReflect.Descriptor instead.
func (*SubmitCaptureResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{50}
}

func (x *SubmitCaptureResult) GetAssets() string {
	if x != nil {
		return x.Assets
	}
	return ""
}

func (x *SubmitCaptureResult) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *SubmitCaptureResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SatelliteLogSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *SatelliteLogSearchRequest) Reset() {
	*x = SatelliteLogSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatelliteLogSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatelliteLogSearchRequest) ProtoMessage() {}

func (x *SatelliteLogSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatelliteLogSearchRequest.ProtoReflect.Descriptor instead.
func (*SatelliteLogSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{51}
}

func (x *SatelliteLogSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *SatelliteLogSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SatelliteLogSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SatelliteLogSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type SatelliteLogSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Satellite string `protobuf:"bytes,1,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *SatelliteLogSearchResult) Reset() {
	*x = SatelliteLogSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatelliteLogSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatelliteLogSearchResult) ProtoMessage() {}

func (x *SatelliteLogSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatelliteLogSearchResult.ProtoReflect.Descriptor instead.
func (*SatelliteLogSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{52}
}

func (x *SatelliteLogSearchResult) GetSatellite() string {
	if x != nil {
		return x.Satellite
	}
	return ""
}

func (x *SatelliteLogSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *SatelliteLogSearchResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type SatellitesForRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *SatellitesForRootRequest) Reset() {
	*x = SatellitesForRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatellitesForRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatellitesForRootRequest) ProtoMessage() {}

func (x *SatellitesForRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatellitesForRootRequest.ProtoReflect.Descriptor instead.
func (*SatellitesForRootRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{53}
}

func (x *SatellitesForRootRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *SatellitesForRootRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SatellitesForRootRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SatellitesForRootRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type SatellitesForRootResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Satellite string `protobuf:"bytes,2,opt,name=satellite,proto3" json:"satellite,omitempty"`
	// A capture summary for this result.
	Capsummary   *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	Associations []string    `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *SatellitesForRootResult) Reset() {
	*x = SatellitesForRootResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatellitesForRootResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatellitesForRootResult) ProtoMessage() {}

func (x *SatellitesForRootResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatellitesForRootResult.ProtoReflect.Descriptor instead.
func (*SatellitesForRootResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{54}
}

func (x *SatellitesForRootResult) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *SatellitesForRootResult) GetSatellite() string {
	if x != nil {
		return x.Satellite
	}
	return ""
}

func (x *SatellitesForRootResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

func (x *SatellitesForRootResult) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *SatellitesForRootResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type URLLogSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *URLLogSearchRequest) Reset() {
	*x = URLLogSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLogSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLogSearchRequest) ProtoMessage() {}

func (x *URLLogSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLogSearchRequest.ProtoReflect.Descriptor instead.
func (*URLLogSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{55}
}

func (x *URLLogSearchRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *URLLogSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *URLLogSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *URLLogSearchRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type URLLogSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *URLLogSearchResult) Reset() {
	*x = URLLogSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLogSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLogSearchResult) ProtoMessage() {}

func (x *URLLogSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLogSearchResult.ProtoReflect.Descriptor instead.
func (*URLLogSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{56}
}

func (x *URLLogSearchResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLogSearchResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *URLLogSearchResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

type PoliciesForRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The capture log is in reverse chronological order, so the start of the
	// range is the most recent time. If start is zero, it's taken to be the
	// largest possible time value.
	Start *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// The capture log is in reverse chronological order, so the end of the
	// range is the least recent time. If end is zero, it's taken to be the
	// smallest possible time value.
	End *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PoliciesForRootRequest) Reset() {
	*x = PoliciesForRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesForRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesForRootRequest) ProtoMessage() {}

func (x *PoliciesForRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesForRootRequest.ProtoReflect.Descriptor instead.
func (*PoliciesForRootRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{57}
}

func (x *PoliciesForRootRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PoliciesForRootRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *PoliciesForRootRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *PoliciesForRootRequest) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *PoliciesForRootRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PoliciesForRootRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type PoliciesForRootResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rootdomain    string               `protobuf:"bytes,1,opt,name=rootdomain,proto3" json:"rootdomain,omitempty"`
	Url           string               `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Time          *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Lastreference *CapSummary          `protobuf:"bytes,4,opt,name=lastreference,proto3" json:"lastreference,omitempty"`
	Lastcapture   *CapSummary          `protobuf:"bytes,5,opt,name=lastcapture,proto3" json:"lastcapture,omitempty"`
	Resume        string               `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PoliciesForRootResult) Reset() {
	*x = PoliciesForRootResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesForRootResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesForRootResult) ProtoMessage() {}

func (x *PoliciesForRootResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesForRootResult.ProtoReflect.Descriptor instead.
func (*PoliciesForRootResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{58}
}

func (x *PoliciesForRootResult) GetRootdomain() string {
	if x != nil {
		return x.Rootdomain
	}
	return ""
}

func (x *PoliciesForRootResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PoliciesForRootResult) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PoliciesForRootResult) GetLastreference() *CapSummary {
	if x != nil {
		return x.Lastreference
	}
	return nil
}

func (x *PoliciesForRootResult) GetLastcapture() *CapSummary {
	if x != nil {
		return x.Lastcapture
	}
	return nil
}

func (x *PoliciesForRootResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type PolicyDomainCapturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The capture log is in reverse chronological order, so the start of the
	// range is the most recent time. If start is zero, it's taken to be the
	// largest possible time value. If a start or end time is specified, the
	// query must be for an exact domain.
	Start *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// The capture log is in reverse chronological order, so the end of the
	// range is the least recent time. If end is zero, it's taken to be the
	// smallest possible time value. If a start or end time is specified, the
	// query must be for an exact domain.
	End *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PolicyDomainCapturesRequest) Reset() {
	*x = PolicyDomainCapturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDomainCapturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDomainCapturesRequest) ProtoMessage() {}

func (x *PolicyDomainCapturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDomainCapturesRequest.ProtoReflect.Descriptor instead.
func (*PolicyDomainCapturesRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{59}
}

func (x *PolicyDomainCapturesRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PolicyDomainCapturesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *PolicyDomainCapturesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PolicyDomainCapturesRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *PolicyDomainCapturesRequest) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *PolicyDomainCapturesRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type PolicyDomainCapturesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matching domain.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,2,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PolicyDomainCapturesResult) Reset() {
	*x = PolicyDomainCapturesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDomainCapturesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDomainCapturesResult) ProtoMessage() {}

func (x *PolicyDomainCapturesResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDomainCapturesResult.ProtoReflect.Descriptor instead.
func (*PolicyDomainCapturesResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{60}
}

func (x *PolicyDomainCapturesResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PolicyDomainCapturesResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

func (x *PolicyDomainCapturesResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type PolicyDomainStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A domain query. This is a domain prefix, which will return results for
	// all relevant subdomains. To search for an exact domain, prefix with "$" -
	// e.g. "$rt.com".
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PolicyDomainStatsRequest) Reset() {
	*x = PolicyDomainStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDomainStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDomainStatsRequest) ProtoMessage() {}

func (x *PolicyDomainStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDomainStatsRequest.ProtoReflect.Descriptor instead.
func (*PolicyDomainStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{61}
}

func (x *PolicyDomainStatsRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PolicyDomainStatsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PolicyDomainStatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of matching domains with policies
	Policydomains uint64 `protobuf:"varint,1,opt,name=policydomains,proto3" json:"policydomains,omitempty"`
	// Number of policies at all matching subdomains
	Subdomainpolicies uint64 `protobuf:"varint,2,opt,name=subdomainpolicies,proto3" json:"subdomainpolicies,omitempty"`
	// Number of policies at the exact matching domain
	Policies uint64 `protobuf:"varint,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Total number of policy captures at all matching subdomains
	Subdomaincaptures uint64 `protobuf:"varint,4,opt,name=subdomaincaptures,proto3" json:"subdomaincaptures,omitempty"`
	// Number of policy captures at the exact matching domain
	Captures uint64 `protobuf:"varint,5,opt,name=captures,proto3" json:"captures,omitempty"`
	// Total number of subdomains with policy captures
	Capturedomains uint64 `protobuf:"varint,6,opt,name=capturedomains,proto3" json:"capturedomains,omitempty"`
}

func (x *PolicyDomainStatsResult) Reset() {
	*x = PolicyDomainStatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDomainStatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDomainStatsResult) ProtoMessage() {}

func (x *PolicyDomainStatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDomainStatsResult.ProtoReflect.Descriptor instead.
func (*PolicyDomainStatsResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{62}
}

func (x *PolicyDomainStatsResult) GetPolicydomains() uint64 {
	if x != nil {
		return x.Policydomains
	}
	return 0
}

func (x *PolicyDomainStatsResult) GetSubdomainpolicies() uint64 {
	if x != nil {
		return x.Subdomainpolicies
	}
	return 0
}

func (x *PolicyDomainStatsResult) GetPolicies() uint64 {
	if x != nil {
		return x.Policies
	}
	return 0
}

func (x *PolicyDomainStatsResult) GetSubdomaincaptures() uint64 {
	if x != nil {
		return x.Subdomaincaptures
	}
	return 0
}

func (x *PolicyDomainStatsResult) GetCaptures() uint64 {
	if x != nil {
		return x.Captures
	}
	return 0
}

func (x *PolicyDomainStatsResult) GetCapturedomains() uint64 {
	if x != nil {
		return x.Capturedomains
	}
	return 0
}

type PolicyURLCapturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset to query.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// A URL query
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Limit the number of records that will be returned.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// A resumption token, previously returned by an identical query.
	Resume string `protobuf:"bytes,4,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PolicyURLCapturesRequest) Reset() {
	*x = PolicyURLCapturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyURLCapturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyURLCapturesRequest) ProtoMessage() {}

func (x *PolicyURLCapturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyURLCapturesRequest.ProtoReflect.Descriptor instead.
func (*PolicyURLCapturesRequest) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{63}
}

func (x *PolicyURLCapturesRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PolicyURLCapturesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *PolicyURLCapturesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PolicyURLCapturesRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type PolicyURLCapturesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A resumption token that can be passed to an identical query to resume
	// results.
	Resume string `protobuf:"bytes,2,opt,name=resume,proto3" json:"resume,omitempty"`
	// A capture summary for this result.
	Capsummary *CapSummary `protobuf:"bytes,3,opt,name=capsummary,proto3" json:"capsummary,omitempty"`
}

func (x *PolicyURLCapturesResult) Reset() {
	*x = PolicyURLCapturesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyURLCapturesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyURLCapturesResult) ProtoMessage() {}

func (x *PolicyURLCapturesResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyURLCapturesResult.ProtoReflect.Descriptor instead.
func (*PolicyURLCapturesResult) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{64}
}

func (x *PolicyURLCapturesResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PolicyURLCapturesResult) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *PolicyURLCapturesResult) GetCapsummary() *CapSummary {
	if x != nil {
		return x.Capsummary
	}
	return nil
}

// Analysis annotations for this certificate
type Cert_Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is this certificate likely to be shared with other
	// organizations? This is common with CDNs.
	Isshared bool `protobuf:"varint,1,opt,name=isshared,proto3" json:"isshared,omitempty"`
}

func (x *Cert_Analysis) Reset() {
	*x = Cert_Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert_Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert_Analysis) ProtoMessage() {}

func (x *Cert_Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert_Analysis.ProtoReflect.Descriptor instead.
func (*Cert_Analysis) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Cert_Analysis) GetIsshared() bool {
	if x != nil {
		return x.Isshared
	}
	return false
}

type Cert_BasicConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isca       bool  `protobuf:"varint,1,opt,name=isca,proto3" json:"isca,omitempty"`
	Maxpathlen int64 `protobuf:"varint,2,opt,name=maxpathlen,proto3" json:"maxpathlen,omitempty"`
}

func (x *Cert_BasicConstraints) Reset() {
	*x = Cert_BasicConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert_BasicConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert_BasicConstraints) ProtoMessage() {}

func (x *Cert_BasicConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert_BasicConstraints.ProtoReflect.Descriptor instead.
func (*Cert_BasicConstraints) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Cert_BasicConstraints) GetIsca() bool {
	if x != nil {
		return x.Isca
	}
	return false
}

func (x *Cert_BasicConstraints) GetMaxpathlen() int64 {
	if x != nil {
		return x.Maxpathlen
	}
	return 0
}

type Cert_DistinguishedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commonname         string   `protobuf:"bytes,1,opt,name=commonname,proto3" json:"commonname,omitempty"`
	Country            []string `protobuf:"bytes,2,rep,name=country,proto3" json:"country,omitempty"`
	Locality           []string `protobuf:"bytes,3,rep,name=locality,proto3" json:"locality,omitempty"`
	Organization       []string `protobuf:"bytes,4,rep,name=organization,proto3" json:"organization,omitempty"`
	Organizationalunit []string `protobuf:"bytes,5,rep,name=organizationalunit,proto3" json:"organizationalunit,omitempty"`
	Postalcode         []string `protobuf:"bytes,6,rep,name=postalcode,proto3" json:"postalcode,omitempty"`
	Province           []string `protobuf:"bytes,7,rep,name=province,proto3" json:"province,omitempty"`
	Serialnumber       string   `protobuf:"bytes,8,opt,name=serialnumber,proto3" json:"serialnumber,omitempty"`
	Streetaddress      []string `protobuf:"bytes,9,rep,name=streetaddress,proto3" json:"streetaddress,omitempty"`
}

func (x *Cert_DistinguishedName) Reset() {
	*x = Cert_DistinguishedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert_DistinguishedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert_DistinguishedName) ProtoMessage() {}

func (x *Cert_DistinguishedName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert_DistinguishedName.ProtoReflect.Descriptor instead.
func (*Cert_DistinguishedName) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Cert_DistinguishedName) GetCommonname() string {
	if x != nil {
		return x.Commonname
	}
	return ""
}

func (x *Cert_DistinguishedName) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Cert_DistinguishedName) GetLocality() []string {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *Cert_DistinguishedName) GetOrganization() []string {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Cert_DistinguishedName) GetOrganizationalunit() []string {
	if x != nil {
		return x.Organizationalunit
	}
	return nil
}

func (x *Cert_DistinguishedName) GetPostalcode() []string {
	if x != nil {
		return x.Postalcode
	}
	return nil
}

func (x *Cert_DistinguishedName) GetProvince() []string {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *Cert_DistinguishedName) GetSerialnumber() string {
	if x != nil {
		return x.Serialnumber
	}
	return ""
}

func (x *Cert_DistinguishedName) GetStreetaddress() []string {
	if x != nil {
		return x.Streetaddress
	}
	return nil
}

type Cert_Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Critical bool   `protobuf:"varint,1,opt,name=critical,proto3" json:"critical,omitempty"`
	Oid      string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Cert_Extension) Reset() {
	*x = Cert_Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert_Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert_Extension) ProtoMessage() {}

func (x *Cert_Extension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert_Extension.ProtoReflect.Descriptor instead.
func (*Cert_Extension) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Cert_Extension) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

func (x *Cert_Extension) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *Cert_Extension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CapSummary_Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URLs submitted for capture.
	Urls     []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	Extended bool     `protobuf:"varint,2,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *CapSummary_Plan) Reset() {
	*x = CapSummary_Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapSummary_Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapSummary_Plan) ProtoMessage() {}

func (x *CapSummary_Plan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapSummary_Plan.ProtoReflect.Descriptor instead.
func (*CapSummary_Plan) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CapSummary_Plan) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *CapSummary_Plan) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

// Roots that resulted from loading a URL in the submitted plan. You can
// think of this as the trajectory of redirections followed to reach the
// final resting URL.
type CapSummary_Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *CapSummary_Root) Reset() {
	*x = CapSummary_Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapSummary_Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapSummary_Root) ProtoMessage() {}

func (x *CapSummary_Root) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapSummary_Root.ProtoReflect.Descriptor instead.
func (*CapSummary_Root) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CapSummary_Root) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type CapSummary_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of flows.
	Flows int32 `protobuf:"varint,1,opt,name=flows,proto3" json:"flows,omitempty"`
	// The number of websocket connections.
	Websockets int32 `protobuf:"varint,2,opt,name=websockets,proto3" json:"websockets,omitempty"`
	// The number of distinct hosts.
	Hosts int32 `protobuf:"varint,3,opt,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *CapSummary_Stats) Reset() {
	*x = CapSummary_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapSummary_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapSummary_Stats) ProtoMessage() {}

func (x *CapSummary_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapSummary_Stats.ProtoReflect.Descriptor instead.
func (*CapSummary_Stats) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CapSummary_Stats) GetFlows() int32 {
	if x != nil {
		return x.Flows
	}
	return 0
}

func (x *CapSummary_Stats) GetWebsockets() int32 {
	if x != nil {
		return x.Websockets
	}
	return 0
}

func (x *CapSummary_Stats) GetHosts() int32 {
	if x != nil {
		return x.Hosts
	}
	return 0
}

type CaptureTextResult_Rectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	With   float32 `protobuf:"fixed32,3,opt,name=with,proto3" json:"with,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *CaptureTextResult_Rectangle) Reset() {
	*x = CaptureTextResult_Rectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult_Rectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult_Rectangle) ProtoMessage() {}

func (x *CaptureTextResult_Rectangle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult_Rectangle.ProtoReflect.Descriptor instead.
func (*CaptureTextResult_Rectangle) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CaptureTextResult_Rectangle) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CaptureTextResult_Rectangle) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CaptureTextResult_Rectangle) GetWith() float32 {
	if x != nil {
		return x.With
	}
	return 0
}

func (x *CaptureTextResult_Rectangle) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type CaptureTextResult_TextNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for this text node.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The underlying content nodes included in this text node.
	Nodes []int64 `protobuf:"varint,2,rep,packed,name=nodes,proto3" json:"nodes,omitempty"`
	// The pixel bounds for this text node.
	Bounds *CaptureTextResult_Rectangle `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// The assembled text.
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CaptureTextResult_TextNode) Reset() {
	*x = CaptureTextResult_TextNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult_TextNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult_TextNode) ProtoMessage() {}

func (x *CaptureTextResult_TextNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult_TextNode.ProtoReflect.Descriptor instead.
func (*CaptureTextResult_TextNode) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CaptureTextResult_TextNode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CaptureTextResult_TextNode) GetNodes() []int64 {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CaptureTextResult_TextNode) GetBounds() *CaptureTextResult_Rectangle {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *CaptureTextResult_TextNode) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CaptureTextResult_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root URL for this document.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Amalgamated text nodes in this document.
	Text []*CaptureTextResult_TextNode `protobuf:"bytes,2,rep,name=text,proto3" json:"text,omitempty"`
}

func (x *CaptureTextResult_Document) Reset() {
	*x = CaptureTextResult_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult_Document) ProtoMessage() {}

func (x *CaptureTextResult_Document) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult_Document.ProtoReflect.Descriptor instead.
func (*CaptureTextResult_Document) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6, 2}
}

func (x *CaptureTextResult_Document) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CaptureTextResult_Document) GetText() []*CaptureTextResult_TextNode {
	if x != nil {
		return x.Text
	}
	return nil
}

type CaptureTextResult_Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Documents within a page include the root frame and any iframes.
	Documents []*CaptureTextResult_Document `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *CaptureTextResult_Page) Reset() {
	*x = CaptureTextResult_Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult_Page) ProtoMessage() {}

func (x *CaptureTextResult_Page) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult_Page.ProtoReflect.Descriptor instead.
func (*CaptureTextResult_Page) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6, 3}
}

func (x *CaptureTextResult_Page) GetDocuments() []*CaptureTextResult_Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

type CaptureTextResult_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The offset of the page this group applies to
	Page int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// The offset of the document within the page.
	Document int64 `protobuf:"varint,3,opt,name=document,proto3" json:"document,omitempty"`
	// A list of node IDs within the page included in this group.
	Ids []int64 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CaptureTextResult_Group) Reset() {
	*x = CaptureTextResult_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureTextResult_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureTextResult_Group) ProtoMessage() {}

func (x *CaptureTextResult_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ngapi_dsetapi_dset_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureTextResult_Group.ProtoReflect.Descriptor instead.
func (*CaptureTextResult_Group) Descriptor() ([]byte, []int) {
	return file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP(), []int{6, 4}
}

func (x *CaptureTextResult_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CaptureTextResult_Group) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CaptureTextResult_Group) GetDocument() int64 {
	if x != nil {
		return x.Document
	}
	return 0
}

func (x *CaptureTextResult_Group) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_proto_ngapi_dsetapi_dset_proto protoreflect.FileDescriptor

var file_proto_ngapi_dsetapi_dset_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x67, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x73,
	0x65, 0x74, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x0e, 0x0a, 0x04, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x72, 0x6c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x63, 0x72, 0x6c, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x6b, 0x65, 0x79, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x6b, 0x65, 0x79, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x63, 0x65, 0x72, 0x74, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x63, 0x65, 0x72, 0x74, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x63, 0x73, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x73, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x6e, 0x73, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x6e, 0x73, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x40, 0x0a, 0x1b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x6e, 0x73,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x64, 0x6e, 0x73, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x79, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x43, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x26, 0x0a,
	0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x1a, 0x46, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x63,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x63, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x70, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x70, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x6e, 0x1a, 0xc3, 0x02,
	0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x4d, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xba, 0x03, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x6f,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x36, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x1a, 0x0a,
	0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x32,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x52, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x91, 0x05, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0x53, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x5f, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x53, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x69, 0x0a, 0x10, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x93, 0x02,
	0x0a, 0x16, 0x43, 0x65, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x49, 0x50, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x43,
	0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11,
	0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a,
	0x1b, 0x43, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x43,
	0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x14,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x54, 0x0a, 0x13,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x19, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a,
	0x1b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43,
	0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x17, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x50, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x49, 0x50, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x50, 0x0a,
	0x0f, 0x49, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x80, 0x01, 0x0a, 0x12, 0x49, 0x50, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x11, 0x49, 0x50, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x7d,
	0x0a, 0x0e, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7d, 0x0a,
	0x0f, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x13,
	0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x14,
	0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x71, 0x0a,
	0x11, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x22, 0x9a, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x7a, 0x0a,
	0x1a, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x75,
	0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73,
	0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x13,
	0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x78,
	0x0a, 0x18, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x6f,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43,
	0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x57, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x18, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x78, 0x0a, 0x18, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x55, 0x52, 0x4c, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x12, 0x55, 0x52, 0x4c, 0x4c, 0x6f,
	0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22,
	0x97, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x6f, 0x6f, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22,
	0x78, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0xaa,
	0x18, 0x0a, 0x04, 0x44, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01,
	0x12, 0x6b, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5f, 0x0a,
	0x0c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x50,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x59,
	0x0a, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x14, 0x43, 0x65, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x62, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x6e, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x74, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x49, 0x50, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x50, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x49, 0x50, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x50,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x5c, 0x0a, 0x0b, 0x49, 0x50, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x25,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x49, 0x50, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x53, 0x0a,
	0x08, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x50,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x49,
	0x50, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0a, 0x4d, 0x65,
	0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12,
	0x77, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6e, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x52, 0x4c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73,
	0x42, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0e,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74,
	0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6e,
	0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x12, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x2e,
	0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65,
	0x74, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x11, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64,
	0x73, 0x65, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74,
	0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x52,
	0x4c, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x55,
	0x52, 0x4c, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x64,
	0x73, 0x65, 0x74, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ngapi_dsetapi_dset_proto_rawDescOnce sync.Once
	file_proto_ngapi_dsetapi_dset_proto_rawDescData = file_proto_ngapi_dsetapi_dset_proto_rawDesc
)

func file_proto_ngapi_dsetapi_dset_proto_rawDescGZIP() []byte {
	file_proto_ngapi_dsetapi_dset_proto_rawDescOnce.Do(func() {
		file_proto_ngapi_dsetapi_dset_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ngapi_dsetapi_dset_proto_rawDescData)
	})
	return file_proto_ngapi_dsetapi_dset_proto_rawDescData
}

var file_proto_ngapi_dsetapi_dset_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_proto_ngapi_dsetapi_dset_proto_goTypes = []interface{}{
	(*Cert)(nil),                        // 0: io.netograph.dset.Cert
	(*CapSummary)(nil),                  // 1: io.netograph.dset.CapSummary
	(*Metadata)(nil),                    // 2: io.netograph.dset.Metadata
	(*CaptureInfoRequest)(nil),          // 3: io.netograph.dset.CaptureInfoRequest
	(*CaptureInfoResult)(nil),           // 4: io.netograph.dset.CaptureInfoResult
	(*CaptureTextRequest)(nil),          // 5: io.netograph.dset.CaptureTextRequest
	(*CaptureTextResult)(nil),           // 6: io.netograph.dset.CaptureTextResult
	(*CaptureLogRequest)(nil),           // 7: io.netograph.dset.CaptureLogRequest
	(*CaptureLogResult)(nil),            // 8: io.netograph.dset.CaptureLogResult
	(*CertDomainSearchRequest)(nil),     // 9: io.netograph.dset.CertDomainSearchRequest
	(*CertDomainSearchResult)(nil),      // 10: io.netograph.dset.CertDomainSearchResult
	(*CertIPSearchRequest)(nil),         // 11: io.netograph.dset.CertIPSearchRequest
	(*CertIPSearchResult)(nil),          // 12: io.netograph.dset.CertIPSearchResult
	(*CertSearchRequest)(nil),           // 13: io.netograph.dset.CertSearchRequest
	(*CertSearchResult)(nil),            // 14: io.netograph.dset.CertSearchResult
	(*CertValidNamesSearchRequest)(nil), // 15: io.netograph.dset.CertValidNamesSearchRequest
	(*CertValidNamesSearchResult)(nil),  // 16: io.netograph.dset.CertValidNamesSearchResult
	(*DomainHistoryRequest)(nil),        // 17: io.netograph.dset.DomainHistoryRequest
	(*DomainHistoryResult)(nil),         // 18: io.netograph.dset.DomainHistoryResult
	(*DomainIDCaptureTagsRequest)(nil),  // 19: io.netograph.dset.DomainIDCaptureTagsRequest
	(*DomainIDCaptureTagsResult)(nil),   // 20: io.netograph.dset.DomainIDCaptureTagsResult
	(*DomainIDDomainSearchRequest)(nil), // 21: io.netograph.dset.DomainIDDomainSearchRequest
	(*DomainIDDomainSearchResult)(nil),  // 22: io.netograph.dset.DomainIDDomainSearchResult
	(*DomainIDTagSearchRequest)(nil),    // 23: io.netograph.dset.DomainIDTagSearchRequest
	(*DomainIDTagSearchResult)(nil),     // 24: io.netograph.dset.DomainIDTagSearchResult
	(*DomainSearchRequest)(nil),         // 25: io.netograph.dset.DomainSearchRequest
	(*DomainSearchResult)(nil),          // 26: io.netograph.dset.DomainSearchResult
	(*DomainsForIPRequest)(nil),         // 27: io.netograph.dset.DomainsForIPRequest
	(*DomainsForIPResult)(nil),          // 28: io.netograph.dset.DomainsForIPResult
	(*IPHistoryRequest)(nil),            // 29: io.netograph.dset.IPHistoryRequest
	(*IPHistoryResult)(nil),             // 30: io.netograph.dset.IPHistoryResult
	(*IPLogSearchRequest)(nil),          // 31: io.netograph.dset.IPLogSearchRequest
	(*IPLogSearchResult)(nil),           // 32: io.netograph.dset.IPLogSearchResult
	(*IPSearchResult)(nil),              // 33: io.netograph.dset.IPSearchResult
	(*IPSearchRequest)(nil),             // 34: io.netograph.dset.IPSearchRequest
	(*IPsForDomainRequest)(nil),         // 35: io.netograph.dset.IPsForDomainRequest
	(*IPsForDomainResult)(nil),          // 36: io.netograph.dset.IPsForDomainResult
	(*MetaForCaptureRequest)(nil),       // 37: io.netograph.dset.MetaForCaptureRequest
	(*MetaForCaptureResult)(nil),        // 38: io.netograph.dset.MetaForCaptureResult
	(*MetaSearchRequest)(nil),           // 39: io.netograph.dset.MetaSearchRequest
	(*MetaSearchResult)(nil),            // 40: io.netograph.dset.MetaSearchResult
	(*RedirsByDestinationRequest)(nil),  // 41: io.netograph.dset.RedirsByDestinationRequest
	(*RedirsByDestinationResult)(nil),   // 42: io.netograph.dset.RedirsByDestinationResult
	(*RedirsBySourceRequest)(nil),       // 43: io.netograph.dset.RedirsBySourceRequest
	(*RedirsBySourceResult)(nil),        // 44: io.netograph.dset.RedirsBySourceResult
	(*RootLogSearchRequest)(nil),        // 45: io.netograph.dset.RootLogSearchRequest
	(*RootLogSearchResult)(nil),         // 46: io.netograph.dset.RootLogSearchResult
	(*RootsForSatelliteRequest)(nil),    // 47: io.netograph.dset.RootsForSatelliteRequest
	(*RootsForSatelliteResult)(nil),     // 48: io.netograph.dset.RootsForSatelliteResult
	(*SubmitCaptureRequest)(nil),        // 49: io.netograph.dset.SubmitCaptureRequest
	(*SubmitCaptureResult)(nil),         // 50: io.netograph.dset.SubmitCaptureResult
	(*SatelliteLogSearchRequest)(nil),   // 51: io.netograph.dset.SatelliteLogSearchRequest
	(*SatelliteLogSearchResult)(nil),    // 52: io.netograph.dset.SatelliteLogSearchResult
	(*SatellitesForRootRequest)(nil),    // 53: io.netograph.dset.SatellitesForRootRequest
	(*SatellitesForRootResult)(nil),     // 54: io.netograph.dset.SatellitesForRootResult
	(*URLLogSearchRequest)(nil),         // 55: io.netograph.dset.URLLogSearchRequest
	(*URLLogSearchResult)(nil),          // 56: io.netograph.dset.URLLogSearchResult
	(*PoliciesForRootRequest)(nil),      // 57: io.netograph.dset.PoliciesForRootRequest
	(*PoliciesForRootResult)(nil),       // 58: io.netograph.dset.PoliciesForRootResult
	(*PolicyDomainCapturesRequest)(nil), // 59: io.netograph.dset.PolicyDomainCapturesRequest
	(*PolicyDomainCapturesResult)(nil),  // 60: io.netograph.dset.PolicyDomainCapturesResult
	(*PolicyDomainStatsRequest)(nil),    // 61: io.netograph.dset.PolicyDomainStatsRequest
	(*PolicyDomainStatsResult)(nil),     // 62: io.netograph.dset.PolicyDomainStatsResult
	(*PolicyURLCapturesRequest)(nil),    // 63: io.netograph.dset.PolicyURLCapturesRequest
	(*PolicyURLCapturesResult)(nil),     // 64: io.netograph.dset.PolicyURLCapturesResult
	(*Cert_Analysis)(nil),               // 65: io.netograph.dset.Cert.Analysis
	(*Cert_BasicConstraints)(nil),       // 66: io.netograph.dset.Cert.BasicConstraints
	(*Cert_DistinguishedName)(nil),      // 67: io.netograph.dset.Cert.DistinguishedName
	(*Cert_Extension)(nil),              // 68: io.netograph.dset.Cert.Extension
	nil,                                 // 69: io.netograph.dset.Cert.FingerprintsEntry
	nil,                                 // 70: io.netograph.dset.Cert.PublickeyEntry
	(*CapSummary_Plan)(nil),             // 71: io.netograph.dset.CapSummary.Plan
	(*CapSummary_Root)(nil),             // 72: io.netograph.dset.CapSummary.Root
	(*CapSummary_Stats)(nil),            // 73: io.netograph.dset.CapSummary.Stats
	(*CaptureTextResult_Rectangle)(nil), // 74: io.netograph.dset.CaptureTextResult.Rectangle
	(*CaptureTextResult_TextNode)(nil),  // 75: io.netograph.dset.CaptureTextResult.TextNode
	(*CaptureTextResult_Document)(nil),  // 76: io.netograph.dset.CaptureTextResult.Document
	(*CaptureTextResult_Page)(nil),      // 77: io.netograph.dset.CaptureTextResult.Page
	(*CaptureTextResult_Group)(nil),     // 78: io.netograph.dset.CaptureTextResult.Group
	(*timestamp.Timestamp)(nil),         // 79: google.protobuf.Timestamp
}
var file_proto_ngapi_dsetapi_dset_proto_depIdxs = []int32{
	66, // 0: io.netograph.dset.Cert.basicconstraints:type_name -> io.netograph.dset.Cert.BasicConstraints
	68, // 1: io.netograph.dset.Cert.extensions:type_name -> io.netograph.dset.Cert.Extension
	69, // 2: io.netograph.dset.Cert.fingerprints:type_name -> io.netograph.dset.Cert.FingerprintsEntry
	67, // 3: io.netograph.dset.Cert.issuer:type_name -> io.netograph.dset.Cert.DistinguishedName
	79, // 4: io.netograph.dset.Cert.notafter:type_name -> google.protobuf.Timestamp
	79, // 5: io.netograph.dset.Cert.notbefore:type_name -> google.protobuf.Timestamp
	70, // 6: io.netograph.dset.Cert.publickey:type_name -> io.netograph.dset.Cert.PublickeyEntry
	67, // 7: io.netograph.dset.Cert.subject:type_name -> io.netograph.dset.Cert.DistinguishedName
	65, // 8: io.netograph.dset.Cert.analysis:type_name -> io.netograph.dset.Cert.Analysis
	72, // 9: io.netograph.dset.CapSummary.roots:type_name -> io.netograph.dset.CapSummary.Root
	79, // 10: io.netograph.dset.CapSummary.time:type_name -> google.protobuf.Timestamp
	71, // 11: io.netograph.dset.CapSummary.plan:type_name -> io.netograph.dset.CapSummary.Plan
	73, // 12: io.netograph.dset.CapSummary.stats:type_name -> io.netograph.dset.CapSummary.Stats
	1,  // 13: io.netograph.dset.CaptureInfoResult.capsummary:type_name -> io.netograph.dset.CapSummary
	77, // 14: io.netograph.dset.CaptureTextResult.pages:type_name -> io.netograph.dset.CaptureTextResult.Page
	78, // 15: io.netograph.dset.CaptureTextResult.groups:type_name -> io.netograph.dset.CaptureTextResult.Group
	79, // 16: io.netograph.dset.CaptureLogRequest.start:type_name -> google.protobuf.Timestamp
	79, // 17: io.netograph.dset.CaptureLogRequest.end:type_name -> google.protobuf.Timestamp
	1,  // 18: io.netograph.dset.CaptureLogResult.capsummary:type_name -> io.netograph.dset.CapSummary
	0,  // 19: io.netograph.dset.CertDomainSearchResult.cert:type_name -> io.netograph.dset.Cert
	1,  // 20: io.netograph.dset.CertDomainSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 21: io.netograph.dset.CertDomainSearchResult.firstcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 22: io.netograph.dset.CertIPSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 23: io.netograph.dset.CertIPSearchResult.firstcapture:type_name -> io.netograph.dset.CapSummary
	0,  // 24: io.netograph.dset.CertIPSearchResult.cert:type_name -> io.netograph.dset.Cert
	0,  // 25: io.netograph.dset.CertSearchResult.cert:type_name -> io.netograph.dset.Cert
	79, // 26: io.netograph.dset.CertSearchResult.time:type_name -> google.protobuf.Timestamp
	0,  // 27: io.netograph.dset.CertValidNamesSearchResult.cert:type_name -> io.netograph.dset.Cert
	1,  // 28: io.netograph.dset.DomainHistoryResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 29: io.netograph.dset.DomainIDDomainSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 30: io.netograph.dset.DomainIDDomainSearchResult.firstcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 31: io.netograph.dset.DomainIDTagSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 32: io.netograph.dset.DomainIDTagSearchResult.firstcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 33: io.netograph.dset.DomainSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 34: io.netograph.dset.DomainsForIPResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 35: io.netograph.dset.IPHistoryResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 36: io.netograph.dset.IPLogSearchResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 37: io.netograph.dset.IPSearchResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 38: io.netograph.dset.IPsForDomainResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	2,  // 39: io.netograph.dset.MetaForCaptureResult.meta:type_name -> io.netograph.dset.Metadata
	79, // 40: io.netograph.dset.MetaForCaptureResult.time:type_name -> google.protobuf.Timestamp
	2,  // 41: io.netograph.dset.MetaSearchResult.meta:type_name -> io.netograph.dset.Metadata
	1,  // 42: io.netograph.dset.MetaSearchResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 43: io.netograph.dset.RedirsByDestinationResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 44: io.netograph.dset.RedirsBySourceResult.latestcapture:type_name -> io.netograph.dset.CapSummary
	1,  // 45: io.netograph.dset.RootLogSearchResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 46: io.netograph.dset.RootsForSatelliteResult.capsummary:type_name -> io.netograph.dset.CapSummary
	2,  // 47: io.netograph.dset.SubmitCaptureRequest.meta:type_name -> io.netograph.dset.Metadata
	1,  // 48: io.netograph.dset.SatelliteLogSearchResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 49: io.netograph.dset.SatellitesForRootResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 50: io.netograph.dset.URLLogSearchResult.capsummary:type_name -> io.netograph.dset.CapSummary
	79, // 51: io.netograph.dset.PoliciesForRootRequest.start:type_name -> google.protobuf.Timestamp
	79, // 52: io.netograph.dset.PoliciesForRootRequest.end:type_name -> google.protobuf.Timestamp
	79, // 53: io.netograph.dset.PoliciesForRootResult.time:type_name -> google.protobuf.Timestamp
	1,  // 54: io.netograph.dset.PoliciesForRootResult.lastreference:type_name -> io.netograph.dset.CapSummary
	1,  // 55: io.netograph.dset.PoliciesForRootResult.lastcapture:type_name -> io.netograph.dset.CapSummary
	79, // 56: io.netograph.dset.PolicyDomainCapturesRequest.start:type_name -> google.protobuf.Timestamp
	79, // 57: io.netograph.dset.PolicyDomainCapturesRequest.end:type_name -> google.protobuf.Timestamp
	1,  // 58: io.netograph.dset.PolicyDomainCapturesResult.capsummary:type_name -> io.netograph.dset.CapSummary
	1,  // 59: io.netograph.dset.PolicyURLCapturesResult.capsummary:type_name -> io.netograph.dset.CapSummary
	74, // 60: io.netograph.dset.CaptureTextResult.TextNode.bounds:type_name -> io.netograph.dset.CaptureTextResult.Rectangle
	75, // 61: io.netograph.dset.CaptureTextResult.Document.text:type_name -> io.netograph.dset.CaptureTextResult.TextNode
	76, // 62: io.netograph.dset.CaptureTextResult.Page.documents:type_name -> io.netograph.dset.CaptureTextResult.Document
	49, // 63: io.netograph.dset.Dset.SubmitCapture:input_type -> io.netograph.dset.SubmitCaptureRequest
	3,  // 64: io.netograph.dset.Dset.CaptureInfo:input_type -> io.netograph.dset.CaptureInfoRequest
	7,  // 65: io.netograph.dset.Dset.CaptureLog:input_type -> io.netograph.dset.CaptureLogRequest
	9,  // 66: io.netograph.dset.Dset.CertDomainSearch:input_type -> io.netograph.dset.CertDomainSearchRequest
	11, // 67: io.netograph.dset.Dset.CertIPSearch:input_type -> io.netograph.dset.CertIPSearchRequest
	13, // 68: io.netograph.dset.Dset.CertSearch:input_type -> io.netograph.dset.CertSearchRequest
	15, // 69: io.netograph.dset.Dset.CertValidNamesSearch:input_type -> io.netograph.dset.CertValidNamesSearchRequest
	17, // 70: io.netograph.dset.Dset.DomainHistory:input_type -> io.netograph.dset.DomainHistoryRequest
	21, // 71: io.netograph.dset.Dset.DomainIDDomainSearch:input_type -> io.netograph.dset.DomainIDDomainSearchRequest
	23, // 72: io.netograph.dset.Dset.DomainIDTagSearch:input_type -> io.netograph.dset.DomainIDTagSearchRequest
	19, // 73: io.netograph.dset.Dset.DomainIDCaptureTags:input_type -> io.netograph.dset.DomainIDCaptureTagsRequest
	25, // 74: io.netograph.dset.Dset.DomainSearch:input_type -> io.netograph.dset.DomainSearchRequest
	27, // 75: io.netograph.dset.Dset.DomainsForIP:input_type -> io.netograph.dset.DomainsForIPRequest
	29, // 76: io.netograph.dset.Dset.IPHistory:input_type -> io.netograph.dset.IPHistoryRequest
	31, // 77: io.netograph.dset.Dset.IPLogSearch:input_type -> io.netograph.dset.IPLogSearchRequest
	34, // 78: io.netograph.dset.Dset.IPSearch:input_type -> io.netograph.dset.IPSearchRequest
	35, // 79: io.netograph.dset.Dset.IPsForDomain:input_type -> io.netograph.dset.IPsForDomainRequest
	37, // 80: io.netograph.dset.Dset.MetaForCapture:input_type -> io.netograph.dset.MetaForCaptureRequest
	39, // 81: io.netograph.dset.Dset.MetaSearch:input_type -> io.netograph.dset.MetaSearchRequest
	57, // 82: io.netograph.dset.Dset.PoliciesForRoot:input_type -> io.netograph.dset.PoliciesForRootRequest
	59, // 83: io.netograph.dset.Dset.PolicyDomainCaptures:input_type -> io.netograph.dset.PolicyDomainCapturesRequest
	61, // 84: io.netograph.dset.Dset.PolicyDomainStats:input_type -> io.netograph.dset.PolicyDomainStatsRequest
	63, // 85: io.netograph.dset.Dset.PolicyURLCaptures:input_type -> io.netograph.dset.PolicyURLCapturesRequest
	41, // 86: io.netograph.dset.Dset.RedirsByDestination:input_type -> io.netograph.dset.RedirsByDestinationRequest
	43, // 87: io.netograph.dset.Dset.RedirsBySource:input_type -> io.netograph.dset.RedirsBySourceRequest
	45, // 88: io.netograph.dset.Dset.RootLogSearch:input_type -> io.netograph.dset.RootLogSearchRequest
	47, // 89: io.netograph.dset.Dset.RootsForSatellite:input_type -> io.netograph.dset.RootsForSatelliteRequest
	51, // 90: io.netograph.dset.Dset.SatelliteLogSearch:input_type -> io.netograph.dset.SatelliteLogSearchRequest
	53, // 91: io.netograph.dset.Dset.SatellitesForRoot:input_type -> io.netograph.dset.SatellitesForRootRequest
	55, // 92: io.netograph.dset.Dset.URLLogSearch:input_type -> io.netograph.dset.URLLogSearchRequest
	50, // 93: io.netograph.dset.Dset.SubmitCapture:output_type -> io.netograph.dset.SubmitCaptureResult
	4,  // 94: io.netograph.dset.Dset.CaptureInfo:output_type -> io.netograph.dset.CaptureInfoResult
	8,  // 95: io.netograph.dset.Dset.CaptureLog:output_type -> io.netograph.dset.CaptureLogResult
	10, // 96: io.netograph.dset.Dset.CertDomainSearch:output_type -> io.netograph.dset.CertDomainSearchResult
	12, // 97: io.netograph.dset.Dset.CertIPSearch:output_type -> io.netograph.dset.CertIPSearchResult
	14, // 98: io.netograph.dset.Dset.CertSearch:output_type -> io.netograph.dset.CertSearchResult
	16, // 99: io.netograph.dset.Dset.CertValidNamesSearch:output_type -> io.netograph.dset.CertValidNamesSearchResult
	18, // 100: io.netograph.dset.Dset.DomainHistory:output_type -> io.netograph.dset.DomainHistoryResult
	22, // 101: io.netograph.dset.Dset.DomainIDDomainSearch:output_type -> io.netograph.dset.DomainIDDomainSearchResult
	24, // 102: io.netograph.dset.Dset.DomainIDTagSearch:output_type -> io.netograph.dset.DomainIDTagSearchResult
	20, // 103: io.netograph.dset.Dset.DomainIDCaptureTags:output_type -> io.netograph.dset.DomainIDCaptureTagsResult
	26, // 104: io.netograph.dset.Dset.DomainSearch:output_type -> io.netograph.dset.DomainSearchResult
	28, // 105: io.netograph.dset.Dset.DomainsForIP:output_type -> io.netograph.dset.DomainsForIPResult
	30, // 106: io.netograph.dset.Dset.IPHistory:output_type -> io.netograph.dset.IPHistoryResult
	32, // 107: io.netograph.dset.Dset.IPLogSearch:output_type -> io.netograph.dset.IPLogSearchResult
	33, // 108: io.netograph.dset.Dset.IPSearch:output_type -> io.netograph.dset.IPSearchResult
	36, // 109: io.netograph.dset.Dset.IPsForDomain:output_type -> io.netograph.dset.IPsForDomainResult
	38, // 110: io.netograph.dset.Dset.MetaForCapture:output_type -> io.netograph.dset.MetaForCaptureResult
	40, // 111: io.netograph.dset.Dset.MetaSearch:output_type -> io.netograph.dset.MetaSearchResult
	58, // 112: io.netograph.dset.Dset.PoliciesForRoot:output_type -> io.netograph.dset.PoliciesForRootResult
	60, // 113: io.netograph.dset.Dset.PolicyDomainCaptures:output_type -> io.netograph.dset.PolicyDomainCapturesResult
	62, // 114: io.netograph.dset.Dset.PolicyDomainStats:output_type -> io.netograph.dset.PolicyDomainStatsResult
	64, // 115: io.netograph.dset.Dset.PolicyURLCaptures:output_type -> io.netograph.dset.PolicyURLCapturesResult
	42, // 116: io.netograph.dset.Dset.RedirsByDestination:output_type -> io.netograph.dset.RedirsByDestinationResult
	44, // 117: io.netograph.dset.Dset.RedirsBySource:output_type -> io.netograph.dset.RedirsBySourceResult
	46, // 118: io.netograph.dset.Dset.RootLogSearch:output_type -> io.netograph.dset.RootLogSearchResult
	48, // 119: io.netograph.dset.Dset.RootsForSatellite:output_type -> io.netograph.dset.RootsForSatelliteResult
	52, // 120: io.netograph.dset.Dset.SatelliteLogSearch:output_type -> io.netograph.dset.SatelliteLogSearchResult
	54, // 121: io.netograph.dset.Dset.SatellitesForRoot:output_type -> io.netograph.dset.SatellitesForRootResult
	56, // 122: io.netograph.dset.Dset.URLLogSearch:output_type -> io.netograph.dset.URLLogSearchResult
	93, // [93:123] is the sub-list for method output_type
	63, // [63:93] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_proto_ngapi_dsetapi_dset_proto_init() }
func file_proto_ngapi_dsetapi_dset_proto_init() {
	if File_proto_ngapi_dsetapi_dset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureLogResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertDomainSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertDomainSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertIPSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertIPSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertValidNamesSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertValidNamesSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainHistoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDCaptureTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDCaptureTagsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDDomainSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDDomainSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDTagSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainIDTagSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainsForIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainsForIPResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPHistoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPLogSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPLogSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsForDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsForDomainResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaForCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaForCaptureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirsByDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirsByDestinationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirsBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirsBySourceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootLogSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootLogSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootsForSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootsForSatelliteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCaptureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatelliteLogSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatelliteLogSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatellitesForRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatellitesForRootResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLogSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLogSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesForRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesForRootResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDomainCapturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDomainCapturesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDomainStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDomainStatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyURLCapturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyURLCapturesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert_Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert_BasicConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert_DistinguishedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert_Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapSummary_Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapSummary_Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapSummary_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult_Rectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult_TextNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult_Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ngapi_dsetapi_dset_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureTextResult_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ngapi_dsetapi_dset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ngapi_dsetapi_dset_proto_goTypes,
		DependencyIndexes: file_proto_ngapi_dsetapi_dset_proto_depIdxs,
		MessageInfos:      file_proto_ngapi_dsetapi_dset_proto_msgTypes,
	}.Build()
	File_proto_ngapi_dsetapi_dset_proto = out.File
	file_proto_ngapi_dsetapi_dset_proto_rawDesc = nil
	file_proto_ngapi_dsetapi_dset_proto_goTypes = nil
	file_proto_ngapi_dsetapi_dset_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DsetClient is the client API for Dset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DsetClient interface {
	// Submit a capture request to a dataset.
	SubmitCapture(ctx context.Context, in *SubmitCaptureRequest, opts ...grpc.CallOption) (*SubmitCaptureResult, error)
	// Retrieve info for a specified capture by ID within a dataset.
	CaptureInfo(ctx context.Context, in *CaptureInfoRequest, opts ...grpc.CallOption) (*CaptureInfoResult, error)
	// Retrieve the capture log for a dataset, in reverse chronological order.
	CaptureLog(ctx context.Context, in *CaptureLogRequest, opts ...grpc.CallOption) (Dset_CaptureLogClient, error)
	// Retrieve certificates that by the domain on which they were observed.
	CertDomainSearch(ctx context.Context, in *CertDomainSearchRequest, opts ...grpc.CallOption) (Dset_CertDomainSearchClient, error)
	// Retrieve certificates for a specified IP query.
	CertIPSearch(ctx context.Context, in *CertIPSearchRequest, opts ...grpc.CallOption) (Dset_CertIPSearchClient, error)
	// Retrieve certificates based on a field query.
	CertSearch(ctx context.Context, in *CertSearchRequest, opts ...grpc.CallOption) (Dset_CertSearchClient, error)
	// Retrieve certificates based on a query over valid domain names. This includes the certificate common name, and all Subject Alternate Name fields.
	CertValidNamesSearch(ctx context.Context, in *CertValidNamesSearchRequest, opts ...grpc.CallOption) (Dset_CertValidNamesSearchClient, error)
	// Retrieve the capture history for a specified domain. The
	// length of this history is capped at ~100.
	DomainHistory(ctx context.Context, in *DomainHistoryRequest, opts ...grpc.CallOption) (Dset_DomainHistoryClient, error)
	// Search the domain ID registry for records matching a domain, restricted to an optional key.
	DomainIDDomainSearch(ctx context.Context, in *DomainIDDomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainIDDomainSearchClient, error)
	// Search the domain ID registry domains matching tag key, with an optional value.
	DomainIDTagSearch(ctx context.Context, in *DomainIDTagSearchRequest, opts ...grpc.CallOption) (Dset_DomainIDTagSearchClient, error)
	// Search the domain ID registry domains matching tag key, with an optional value.
	DomainIDCaptureTags(ctx context.Context, in *DomainIDCaptureTagsRequest, opts ...grpc.CallOption) (Dset_DomainIDCaptureTagsClient, error)
	// Retrieve the capture log for a specified domain in a dataset.
	DomainSearch(ctx context.Context, in *DomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainSearchClient, error)
	// Find all domains in the dataset associated with a given IP address.
	DomainsForIP(ctx context.Context, in *DomainsForIPRequest, opts ...grpc.CallOption) (Dset_DomainsForIPClient, error)
	// Retrieve the capture history for a specified IP in a dataset. The
	// length of this history is capped at ~100.
	IPHistory(ctx context.Context, in *IPHistoryRequest, opts ...grpc.CallOption) (Dset_IPHistoryClient, error)
	// Search the dataset log for captures that contain a given IP.
	IPLogSearch(ctx context.Context, in *IPLogSearchRequest, opts ...grpc.CallOption) (Dset_IPLogSearchClient, error)
	// Find all IPs in the dataset that match an address and integer netmask.
	IPSearch(ctx context.Context, in *IPSearchRequest, opts ...grpc.CallOption) (Dset_IPSearchClient, error)
	// Find all IPs in a dataset associated with a given domain.
	IPsForDomain(ctx context.Context, in *IPsForDomainRequest, opts ...grpc.CallOption) (Dset_IPsForDomainClient, error)
	// Get metadata associated with a specified capture within a dataset.
	MetaForCapture(ctx context.Context, in *MetaForCaptureRequest, opts ...grpc.CallOption) (Dset_MetaForCaptureClient, error)
	// Search the dataset log for captures matching a metadata query.
	MetaSearch(ctx context.Context, in *MetaSearchRequest, opts ...grpc.CallOption) (Dset_MetaSearchClient, error)
	// Find all policies for a specified domain query.
	PoliciesForRoot(ctx context.Context, in *PoliciesForRootRequest, opts ...grpc.CallOption) (Dset_PoliciesForRootClient, error)
	// Retrieve the policy capture log for a domain query, in reverse chronological order.
	PolicyDomainCaptures(ctx context.Context, in *PolicyDomainCapturesRequest, opts ...grpc.CallOption) (Dset_PolicyDomainCapturesClient, error)
	// Retrieve statistics for a policy domain query.
	PolicyDomainStats(ctx context.Context, in *PolicyDomainStatsRequest, opts ...grpc.CallOption) (*PolicyDomainStatsResult, error)
	// Retrieve the policy capture log for specific policy URL, in reverse chronological order.
	PolicyURLCaptures(ctx context.Context, in *PolicyURLCapturesRequest, opts ...grpc.CallOption) (Dset_PolicyURLCapturesClient, error)
	// Find all redirections in the dataset for a given destination domain query.
	RedirsByDestination(ctx context.Context, in *RedirsByDestinationRequest, opts ...grpc.CallOption) (Dset_RedirsByDestinationClient, error)
	// Find all redirections in the dataset for a given source domain query.
	RedirsBySource(ctx context.Context, in *RedirsBySourceRequest, opts ...grpc.CallOption) (Dset_RedirsBySourceClient, error)
	// Search the dataset log for captures where any root domain matches a given query.
	RootLogSearch(ctx context.Context, in *RootLogSearchRequest, opts ...grpc.CallOption) (Dset_RootLogSearchClient, error)
	// Find all roots in a dataset that are associated with a given satellite query.
	RootsForSatellite(ctx context.Context, in *RootsForSatelliteRequest, opts ...grpc.CallOption) (Dset_RootsForSatelliteClient, error)
	// Search the dataset log for captures where any satellite domain matches a given query.
	SatelliteLogSearch(ctx context.Context, in *SatelliteLogSearchRequest, opts ...grpc.CallOption) (Dset_SatelliteLogSearchClient, error)
	// Find all satellites in the dataset that are associated with a given root query.
	SatellitesForRoot(ctx context.Context, in *SatellitesForRootRequest, opts ...grpc.CallOption) (Dset_SatellitesForRootClient, error)
	// Search the dataset log for captures where any root URL matches a given URL query.
	URLLogSearch(ctx context.Context, in *URLLogSearchRequest, opts ...grpc.CallOption) (Dset_URLLogSearchClient, error)
}

type dsetClient struct {
	cc grpc.ClientConnInterface
}

func NewDsetClient(cc grpc.ClientConnInterface) DsetClient {
	return &dsetClient{cc}
}

func (c *dsetClient) SubmitCapture(ctx context.Context, in *SubmitCaptureRequest, opts ...grpc.CallOption) (*SubmitCaptureResult, error) {
	out := new(SubmitCaptureResult)
	err := c.cc.Invoke(ctx, "/io.netograph.dset.Dset/SubmitCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsetClient) CaptureInfo(ctx context.Context, in *CaptureInfoRequest, opts ...grpc.CallOption) (*CaptureInfoResult, error) {
	out := new(CaptureInfoResult)
	err := c.cc.Invoke(ctx, "/io.netograph.dset.Dset/CaptureInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsetClient) CaptureLog(ctx context.Context, in *CaptureLogRequest, opts ...grpc.CallOption) (Dset_CaptureLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[0], "/io.netograph.dset.Dset/CaptureLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCaptureLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CaptureLogClient interface {
	Recv() (*CaptureLogResult, error)
	grpc.ClientStream
}

type dsetCaptureLogClient struct {
	grpc.ClientStream
}

func (x *dsetCaptureLogClient) Recv() (*CaptureLogResult, error) {
	m := new(CaptureLogResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) CertDomainSearch(ctx context.Context, in *CertDomainSearchRequest, opts ...grpc.CallOption) (Dset_CertDomainSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[1], "/io.netograph.dset.Dset/CertDomainSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCertDomainSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CertDomainSearchClient interface {
	Recv() (*CertDomainSearchResult, error)
	grpc.ClientStream
}

type dsetCertDomainSearchClient struct {
	grpc.ClientStream
}

func (x *dsetCertDomainSearchClient) Recv() (*CertDomainSearchResult, error) {
	m := new(CertDomainSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) CertIPSearch(ctx context.Context, in *CertIPSearchRequest, opts ...grpc.CallOption) (Dset_CertIPSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[2], "/io.netograph.dset.Dset/CertIPSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCertIPSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CertIPSearchClient interface {
	Recv() (*CertIPSearchResult, error)
	grpc.ClientStream
}

type dsetCertIPSearchClient struct {
	grpc.ClientStream
}

func (x *dsetCertIPSearchClient) Recv() (*CertIPSearchResult, error) {
	m := new(CertIPSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) CertSearch(ctx context.Context, in *CertSearchRequest, opts ...grpc.CallOption) (Dset_CertSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[3], "/io.netograph.dset.Dset/CertSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCertSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CertSearchClient interface {
	Recv() (*CertSearchResult, error)
	grpc.ClientStream
}

type dsetCertSearchClient struct {
	grpc.ClientStream
}

func (x *dsetCertSearchClient) Recv() (*CertSearchResult, error) {
	m := new(CertSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) CertValidNamesSearch(ctx context.Context, in *CertValidNamesSearchRequest, opts ...grpc.CallOption) (Dset_CertValidNamesSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[4], "/io.netograph.dset.Dset/CertValidNamesSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetCertValidNamesSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_CertValidNamesSearchClient interface {
	Recv() (*CertValidNamesSearchResult, error)
	grpc.ClientStream
}

type dsetCertValidNamesSearchClient struct {
	grpc.ClientStream
}

func (x *dsetCertValidNamesSearchClient) Recv() (*CertValidNamesSearchResult, error) {
	m := new(CertValidNamesSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainHistory(ctx context.Context, in *DomainHistoryRequest, opts ...grpc.CallOption) (Dset_DomainHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[5], "/io.netograph.dset.Dset/DomainHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainHistoryClient interface {
	Recv() (*DomainHistoryResult, error)
	grpc.ClientStream
}

type dsetDomainHistoryClient struct {
	grpc.ClientStream
}

func (x *dsetDomainHistoryClient) Recv() (*DomainHistoryResult, error) {
	m := new(DomainHistoryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainIDDomainSearch(ctx context.Context, in *DomainIDDomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainIDDomainSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[6], "/io.netograph.dset.Dset/DomainIDDomainSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainIDDomainSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainIDDomainSearchClient interface {
	Recv() (*DomainIDDomainSearchResult, error)
	grpc.ClientStream
}

type dsetDomainIDDomainSearchClient struct {
	grpc.ClientStream
}

func (x *dsetDomainIDDomainSearchClient) Recv() (*DomainIDDomainSearchResult, error) {
	m := new(DomainIDDomainSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainIDTagSearch(ctx context.Context, in *DomainIDTagSearchRequest, opts ...grpc.CallOption) (Dset_DomainIDTagSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[7], "/io.netograph.dset.Dset/DomainIDTagSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainIDTagSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainIDTagSearchClient interface {
	Recv() (*DomainIDTagSearchResult, error)
	grpc.ClientStream
}

type dsetDomainIDTagSearchClient struct {
	grpc.ClientStream
}

func (x *dsetDomainIDTagSearchClient) Recv() (*DomainIDTagSearchResult, error) {
	m := new(DomainIDTagSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainIDCaptureTags(ctx context.Context, in *DomainIDCaptureTagsRequest, opts ...grpc.CallOption) (Dset_DomainIDCaptureTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[8], "/io.netograph.dset.Dset/DomainIDCaptureTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainIDCaptureTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainIDCaptureTagsClient interface {
	Recv() (*DomainIDCaptureTagsResult, error)
	grpc.ClientStream
}

type dsetDomainIDCaptureTagsClient struct {
	grpc.ClientStream
}

func (x *dsetDomainIDCaptureTagsClient) Recv() (*DomainIDCaptureTagsResult, error) {
	m := new(DomainIDCaptureTagsResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainSearch(ctx context.Context, in *DomainSearchRequest, opts ...grpc.CallOption) (Dset_DomainSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[9], "/io.netograph.dset.Dset/DomainSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainSearchClient interface {
	Recv() (*DomainSearchResult, error)
	grpc.ClientStream
}

type dsetDomainSearchClient struct {
	grpc.ClientStream
}

func (x *dsetDomainSearchClient) Recv() (*DomainSearchResult, error) {
	m := new(DomainSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) DomainsForIP(ctx context.Context, in *DomainsForIPRequest, opts ...grpc.CallOption) (Dset_DomainsForIPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[10], "/io.netograph.dset.Dset/DomainsForIP", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetDomainsForIPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_DomainsForIPClient interface {
	Recv() (*DomainsForIPResult, error)
	grpc.ClientStream
}

type dsetDomainsForIPClient struct {
	grpc.ClientStream
}

func (x *dsetDomainsForIPClient) Recv() (*DomainsForIPResult, error) {
	m := new(DomainsForIPResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPHistory(ctx context.Context, in *IPHistoryRequest, opts ...grpc.CallOption) (Dset_IPHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[11], "/io.netograph.dset.Dset/IPHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPHistoryClient interface {
	Recv() (*IPHistoryResult, error)
	grpc.ClientStream
}

type dsetIPHistoryClient struct {
	grpc.ClientStream
}

func (x *dsetIPHistoryClient) Recv() (*IPHistoryResult, error) {
	m := new(IPHistoryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPLogSearch(ctx context.Context, in *IPLogSearchRequest, opts ...grpc.CallOption) (Dset_IPLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[12], "/io.netograph.dset.Dset/IPLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPLogSearchClient interface {
	Recv() (*IPLogSearchResult, error)
	grpc.ClientStream
}

type dsetIPLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetIPLogSearchClient) Recv() (*IPLogSearchResult, error) {
	m := new(IPLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPSearch(ctx context.Context, in *IPSearchRequest, opts ...grpc.CallOption) (Dset_IPSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[13], "/io.netograph.dset.Dset/IPSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPSearchClient interface {
	Recv() (*IPSearchResult, error)
	grpc.ClientStream
}

type dsetIPSearchClient struct {
	grpc.ClientStream
}

func (x *dsetIPSearchClient) Recv() (*IPSearchResult, error) {
	m := new(IPSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) IPsForDomain(ctx context.Context, in *IPsForDomainRequest, opts ...grpc.CallOption) (Dset_IPsForDomainClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[14], "/io.netograph.dset.Dset/IPsForDomain", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetIPsForDomainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_IPsForDomainClient interface {
	Recv() (*IPsForDomainResult, error)
	grpc.ClientStream
}

type dsetIPsForDomainClient struct {
	grpc.ClientStream
}

func (x *dsetIPsForDomainClient) Recv() (*IPsForDomainResult, error) {
	m := new(IPsForDomainResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) MetaForCapture(ctx context.Context, in *MetaForCaptureRequest, opts ...grpc.CallOption) (Dset_MetaForCaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[15], "/io.netograph.dset.Dset/MetaForCapture", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetMetaForCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_MetaForCaptureClient interface {
	Recv() (*MetaForCaptureResult, error)
	grpc.ClientStream
}

type dsetMetaForCaptureClient struct {
	grpc.ClientStream
}

func (x *dsetMetaForCaptureClient) Recv() (*MetaForCaptureResult, error) {
	m := new(MetaForCaptureResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) MetaSearch(ctx context.Context, in *MetaSearchRequest, opts ...grpc.CallOption) (Dset_MetaSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[16], "/io.netograph.dset.Dset/MetaSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetMetaSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_MetaSearchClient interface {
	Recv() (*MetaSearchResult, error)
	grpc.ClientStream
}

type dsetMetaSearchClient struct {
	grpc.ClientStream
}

func (x *dsetMetaSearchClient) Recv() (*MetaSearchResult, error) {
	m := new(MetaSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) PoliciesForRoot(ctx context.Context, in *PoliciesForRootRequest, opts ...grpc.CallOption) (Dset_PoliciesForRootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[17], "/io.netograph.dset.Dset/PoliciesForRoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetPoliciesForRootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_PoliciesForRootClient interface {
	Recv() (*PoliciesForRootResult, error)
	grpc.ClientStream
}

type dsetPoliciesForRootClient struct {
	grpc.ClientStream
}

func (x *dsetPoliciesForRootClient) Recv() (*PoliciesForRootResult, error) {
	m := new(PoliciesForRootResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) PolicyDomainCaptures(ctx context.Context, in *PolicyDomainCapturesRequest, opts ...grpc.CallOption) (Dset_PolicyDomainCapturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[18], "/io.netograph.dset.Dset/PolicyDomainCaptures", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetPolicyDomainCapturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_PolicyDomainCapturesClient interface {
	Recv() (*PolicyDomainCapturesResult, error)
	grpc.ClientStream
}

type dsetPolicyDomainCapturesClient struct {
	grpc.ClientStream
}

func (x *dsetPolicyDomainCapturesClient) Recv() (*PolicyDomainCapturesResult, error) {
	m := new(PolicyDomainCapturesResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) PolicyDomainStats(ctx context.Context, in *PolicyDomainStatsRequest, opts ...grpc.CallOption) (*PolicyDomainStatsResult, error) {
	out := new(PolicyDomainStatsResult)
	err := c.cc.Invoke(ctx, "/io.netograph.dset.Dset/PolicyDomainStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsetClient) PolicyURLCaptures(ctx context.Context, in *PolicyURLCapturesRequest, opts ...grpc.CallOption) (Dset_PolicyURLCapturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[19], "/io.netograph.dset.Dset/PolicyURLCaptures", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetPolicyURLCapturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_PolicyURLCapturesClient interface {
	Recv() (*PolicyURLCapturesResult, error)
	grpc.ClientStream
}

type dsetPolicyURLCapturesClient struct {
	grpc.ClientStream
}

func (x *dsetPolicyURLCapturesClient) Recv() (*PolicyURLCapturesResult, error) {
	m := new(PolicyURLCapturesResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RedirsByDestination(ctx context.Context, in *RedirsByDestinationRequest, opts ...grpc.CallOption) (Dset_RedirsByDestinationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[20], "/io.netograph.dset.Dset/RedirsByDestination", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRedirsByDestinationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RedirsByDestinationClient interface {
	Recv() (*RedirsByDestinationResult, error)
	grpc.ClientStream
}

type dsetRedirsByDestinationClient struct {
	grpc.ClientStream
}

func (x *dsetRedirsByDestinationClient) Recv() (*RedirsByDestinationResult, error) {
	m := new(RedirsByDestinationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RedirsBySource(ctx context.Context, in *RedirsBySourceRequest, opts ...grpc.CallOption) (Dset_RedirsBySourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[21], "/io.netograph.dset.Dset/RedirsBySource", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRedirsBySourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RedirsBySourceClient interface {
	Recv() (*RedirsBySourceResult, error)
	grpc.ClientStream
}

type dsetRedirsBySourceClient struct {
	grpc.ClientStream
}

func (x *dsetRedirsBySourceClient) Recv() (*RedirsBySourceResult, error) {
	m := new(RedirsBySourceResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RootLogSearch(ctx context.Context, in *RootLogSearchRequest, opts ...grpc.CallOption) (Dset_RootLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[22], "/io.netograph.dset.Dset/RootLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRootLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RootLogSearchClient interface {
	Recv() (*RootLogSearchResult, error)
	grpc.ClientStream
}

type dsetRootLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetRootLogSearchClient) Recv() (*RootLogSearchResult, error) {
	m := new(RootLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) RootsForSatellite(ctx context.Context, in *RootsForSatelliteRequest, opts ...grpc.CallOption) (Dset_RootsForSatelliteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[23], "/io.netograph.dset.Dset/RootsForSatellite", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetRootsForSatelliteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_RootsForSatelliteClient interface {
	Recv() (*RootsForSatelliteResult, error)
	grpc.ClientStream
}

type dsetRootsForSatelliteClient struct {
	grpc.ClientStream
}

func (x *dsetRootsForSatelliteClient) Recv() (*RootsForSatelliteResult, error) {
	m := new(RootsForSatelliteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) SatelliteLogSearch(ctx context.Context, in *SatelliteLogSearchRequest, opts ...grpc.CallOption) (Dset_SatelliteLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[24], "/io.netograph.dset.Dset/SatelliteLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetSatelliteLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_SatelliteLogSearchClient interface {
	Recv() (*SatelliteLogSearchResult, error)
	grpc.ClientStream
}

type dsetSatelliteLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetSatelliteLogSearchClient) Recv() (*SatelliteLogSearchResult, error) {
	m := new(SatelliteLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) SatellitesForRoot(ctx context.Context, in *SatellitesForRootRequest, opts ...grpc.CallOption) (Dset_SatellitesForRootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[25], "/io.netograph.dset.Dset/SatellitesForRoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetSatellitesForRootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_SatellitesForRootClient interface {
	Recv() (*SatellitesForRootResult, error)
	grpc.ClientStream
}

type dsetSatellitesForRootClient struct {
	grpc.ClientStream
}

func (x *dsetSatellitesForRootClient) Recv() (*SatellitesForRootResult, error) {
	m := new(SatellitesForRootResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dsetClient) URLLogSearch(ctx context.Context, in *URLLogSearchRequest, opts ...grpc.CallOption) (Dset_URLLogSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dset_serviceDesc.Streams[26], "/io.netograph.dset.Dset/URLLogSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsetURLLogSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dset_URLLogSearchClient interface {
	Recv() (*URLLogSearchResult, error)
	grpc.ClientStream
}

type dsetURLLogSearchClient struct {
	grpc.ClientStream
}

func (x *dsetURLLogSearchClient) Recv() (*URLLogSearchResult, error) {
	m := new(URLLogSearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DsetServer is the server API for Dset service.
type DsetServer interface {
	// Submit a capture request to a dataset.
	SubmitCapture(context.Context, *SubmitCaptureRequest) (*SubmitCaptureResult, error)
	// Retrieve info for a specified capture by ID within a dataset.
	CaptureInfo(context.Context, *CaptureInfoRequest) (*CaptureInfoResult, error)
	// Retrieve the capture log for a dataset, in reverse chronological order.
	CaptureLog(*CaptureLogRequest, Dset_CaptureLogServer) error
	// Retrieve certificates that by the domain on which they were observed.
	CertDomainSearch(*CertDomainSearchRequest, Dset_CertDomainSearchServer) error
	// Retrieve certificates for a specified IP query.
	CertIPSearch(*CertIPSearchRequest, Dset_CertIPSearchServer) error
	// Retrieve certificates based on a field query.
	CertSearch(*CertSearchRequest, Dset_CertSearchServer) error
	// Retrieve certificates based on a query over valid domain names. This includes the certificate common name, and all Subject Alternate Name fields.
	CertValidNamesSearch(*CertValidNamesSearchRequest, Dset_CertValidNamesSearchServer) error
	// Retrieve the capture history for a specified domain. The
	// length of this history is capped at ~100.
	DomainHistory(*DomainHistoryRequest, Dset_DomainHistoryServer) error
	// Search the domain ID registry for records matching a domain, restricted to an optional key.
	DomainIDDomainSearch(*DomainIDDomainSearchRequest, Dset_DomainIDDomainSearchServer) error
	// Search the domain ID registry domains matching tag key, with an optional value.
	DomainIDTagSearch(*DomainIDTagSearchRequest, Dset_DomainIDTagSearchServer) error
	// Search the domain ID registry domains matching tag key, with an optional value.
	DomainIDCaptureTags(*DomainIDCaptureTagsRequest, Dset_DomainIDCaptureTagsServer) error
	// Retrieve the capture log for a specified domain in a dataset.
	DomainSearch(*DomainSearchRequest, Dset_DomainSearchServer) error
	// Find all domains in the dataset associated with a given IP address.
	DomainsForIP(*DomainsForIPRequest, Dset_DomainsForIPServer) error
	// Retrieve the capture history for a specified IP in a dataset. The
	// length of this history is capped at ~100.
	IPHistory(*IPHistoryRequest, Dset_IPHistoryServer) error
	// Search the dataset log for captures that contain a given IP.
	IPLogSearch(*IPLogSearchRequest, Dset_IPLogSearchServer) error
	// Find all IPs in the dataset that match an address and integer netmask.
	IPSearch(*IPSearchRequest, Dset_IPSearchServer) error
	// Find all IPs in a dataset associated with a given domain.
	IPsForDomain(*IPsForDomainRequest, Dset_IPsForDomainServer) error
	// Get metadata associated with a specified capture within a dataset.
	MetaForCapture(*MetaForCaptureRequest, Dset_MetaForCaptureServer) error
	// Search the dataset log for captures matching a metadata query.
	MetaSearch(*MetaSearchRequest, Dset_MetaSearchServer) error
	// Find all policies for a specified domain query.
	PoliciesForRoot(*PoliciesForRootRequest, Dset_PoliciesForRootServer) error
	// Retrieve the policy capture log for a domain query, in reverse chronological order.
	PolicyDomainCaptures(*PolicyDomainCapturesRequest, Dset_PolicyDomainCapturesServer) error
	// Retrieve statistics for a policy domain query.
	PolicyDomainStats(context.Context, *PolicyDomainStatsRequest) (*PolicyDomainStatsResult, error)
	// Retrieve the policy capture log for specific policy URL, in reverse chronological order.
	PolicyURLCaptures(*PolicyURLCapturesRequest, Dset_PolicyURLCapturesServer) error
	// Find all redirections in the dataset for a given destination domain query.
	RedirsByDestination(*RedirsByDestinationRequest, Dset_RedirsByDestinationServer) error
	// Find all redirections in the dataset for a given source domain query.
	RedirsBySource(*RedirsBySourceRequest, Dset_RedirsBySourceServer) error
	// Search the dataset log for captures where any root domain matches a given query.
	RootLogSearch(*RootLogSearchRequest, Dset_RootLogSearchServer) error
	// Find all roots in a dataset that are associated with a given satellite query.
	RootsForSatellite(*RootsForSatelliteRequest, Dset_RootsForSatelliteServer) error
	// Search the dataset log for captures where any satellite domain matches a given query.
	SatelliteLogSearch(*SatelliteLogSearchRequest, Dset_SatelliteLogSearchServer) error
	// Find all satellites in the dataset that are associated with a given root query.
	SatellitesForRoot(*SatellitesForRootRequest, Dset_SatellitesForRootServer) error
	// Search the dataset log for captures where any root URL matches a given URL query.
	URLLogSearch(*URLLogSearchRequest, Dset_URLLogSearchServer) error
}

// UnimplementedDsetServer can be embedded to have forward compatible implementations.
type UnimplementedDsetServer struct {
}

func (*UnimplementedDsetServer) SubmitCapture(context.Context, *SubmitCaptureRequest) (*SubmitCaptureResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCapture not implemented")
}
func (*UnimplementedDsetServer) CaptureInfo(context.Context, *CaptureInfoRequest) (*CaptureInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureInfo not implemented")
}
func (*UnimplementedDsetServer) CaptureLog(*CaptureLogRequest, Dset_CaptureLogServer) error {
	return status.Errorf(codes.Unimplemented, "method CaptureLog not implemented")
}
func (*UnimplementedDsetServer) CertDomainSearch(*CertDomainSearchRequest, Dset_CertDomainSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method CertDomainSearch not implemented")
}
func (*UnimplementedDsetServer) CertIPSearch(*CertIPSearchRequest, Dset_CertIPSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method CertIPSearch not implemented")
}
func (*UnimplementedDsetServer) CertSearch(*CertSearchRequest, Dset_CertSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method CertSearch not implemented")
}
func (*UnimplementedDsetServer) CertValidNamesSearch(*CertValidNamesSearchRequest, Dset_CertValidNamesSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method CertValidNamesSearch not implemented")
}
func (*UnimplementedDsetServer) DomainHistory(*DomainHistoryRequest, Dset_DomainHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainHistory not implemented")
}
func (*UnimplementedDsetServer) DomainIDDomainSearch(*DomainIDDomainSearchRequest, Dset_DomainIDDomainSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainIDDomainSearch not implemented")
}
func (*UnimplementedDsetServer) DomainIDTagSearch(*DomainIDTagSearchRequest, Dset_DomainIDTagSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainIDTagSearch not implemented")
}
func (*UnimplementedDsetServer) DomainIDCaptureTags(*DomainIDCaptureTagsRequest, Dset_DomainIDCaptureTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainIDCaptureTags not implemented")
}
func (*UnimplementedDsetServer) DomainSearch(*DomainSearchRequest, Dset_DomainSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainSearch not implemented")
}
func (*UnimplementedDsetServer) DomainsForIP(*DomainsForIPRequest, Dset_DomainsForIPServer) error {
	return status.Errorf(codes.Unimplemented, "method DomainsForIP not implemented")
}
func (*UnimplementedDsetServer) IPHistory(*IPHistoryRequest, Dset_IPHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method IPHistory not implemented")
}
func (*UnimplementedDsetServer) IPLogSearch(*IPLogSearchRequest, Dset_IPLogSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method IPLogSearch not implemented")
}
func (*UnimplementedDsetServer) IPSearch(*IPSearchRequest, Dset_IPSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method IPSearch not implemented")
}
func (*UnimplementedDsetServer) IPsForDomain(*IPsForDomainRequest, Dset_IPsForDomainServer) error {
	return status.Errorf(codes.Unimplemented, "method IPsForDomain not implemented")
}
func (*UnimplementedDsetServer) MetaForCapture(*MetaForCaptureRequest, Dset_MetaForCaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method MetaForCapture not implemented")
}
func (*UnimplementedDsetServer) MetaSearch(*MetaSearchRequest, Dset_MetaSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method MetaSearch not implemented")
}
func (*UnimplementedDsetServer) PoliciesForRoot(*PoliciesForRootRequest, Dset_PoliciesForRootServer) error {
	return status.Errorf(codes.Unimplemented, "method PoliciesForRoot not implemented")
}
func (*UnimplementedDsetServer) PolicyDomainCaptures(*PolicyDomainCapturesRequest, Dset_PolicyDomainCapturesServer) error {
	return status.Errorf(codes.Unimplemented, "method PolicyDomainCaptures not implemented")
}
func (*UnimplementedDsetServer) PolicyDomainStats(context.Context, *PolicyDomainStatsRequest) (*PolicyDomainStatsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyDomainStats not implemented")
}
func (*UnimplementedDsetServer) PolicyURLCaptures(*PolicyURLCapturesRequest, Dset_PolicyURLCapturesServer) error {
	return status.Errorf(codes.Unimplemented, "method PolicyURLCaptures not implemented")
}
func (*UnimplementedDsetServer) RedirsByDestination(*RedirsByDestinationRequest, Dset_RedirsByDestinationServer) error {
	return status.Errorf(codes.Unimplemented, "method RedirsByDestination not implemented")
}
func (*UnimplementedDsetServer) RedirsBySource(*RedirsBySourceRequest, Dset_RedirsBySourceServer) error {
	return status.Errorf(codes.Unimplemented, "method RedirsBySource not implemented")
}
func (*UnimplementedDsetServer) RootLogSearch(*RootLogSearchRequest, Dset_RootLogSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method RootLogSearch not implemented")
}
func (*UnimplementedDsetServer) RootsForSatellite(*RootsForSatelliteRequest, Dset_RootsForSatelliteServer) error {
	return status.Errorf(codes.Unimplemented, "method RootsForSatellite not implemented")
}
func (*UnimplementedDsetServer) SatelliteLogSearch(*SatelliteLogSearchRequest, Dset_SatelliteLogSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method SatelliteLogSearch not implemented")
}
func (*UnimplementedDsetServer) SatellitesForRoot(*SatellitesForRootRequest, Dset_SatellitesForRootServer) error {
	return status.Errorf(codes.Unimplemented, "method SatellitesForRoot not implemented")
}
func (*UnimplementedDsetServer) URLLogSearch(*URLLogSearchRequest, Dset_URLLogSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method URLLogSearch not implemented")
}

func RegisterDsetServer(s *grpc.Server, srv DsetServer) {
	s.RegisterService(&_Dset_serviceDesc, srv)
}

func _Dset_SubmitCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsetServer).SubmitCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.dset.Dset/SubmitCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsetServer).SubmitCapture(ctx, req.(*SubmitCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dset_CaptureInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsetServer).CaptureInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.dset.Dset/CaptureInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsetServer).CaptureInfo(ctx, req.(*CaptureInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dset_CaptureLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CaptureLog(m, &dsetCaptureLogServer{stream})
}

type Dset_CaptureLogServer interface {
	Send(*CaptureLogResult) error
	grpc.ServerStream
}

type dsetCaptureLogServer struct {
	grpc.ServerStream
}

func (x *dsetCaptureLogServer) Send(m *CaptureLogResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_CertDomainSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CertDomainSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CertDomainSearch(m, &dsetCertDomainSearchServer{stream})
}

type Dset_CertDomainSearchServer interface {
	Send(*CertDomainSearchResult) error
	grpc.ServerStream
}

type dsetCertDomainSearchServer struct {
	grpc.ServerStream
}

func (x *dsetCertDomainSearchServer) Send(m *CertDomainSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_CertIPSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CertIPSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CertIPSearch(m, &dsetCertIPSearchServer{stream})
}

type Dset_CertIPSearchServer interface {
	Send(*CertIPSearchResult) error
	grpc.ServerStream
}

type dsetCertIPSearchServer struct {
	grpc.ServerStream
}

func (x *dsetCertIPSearchServer) Send(m *CertIPSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_CertSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CertSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CertSearch(m, &dsetCertSearchServer{stream})
}

type Dset_CertSearchServer interface {
	Send(*CertSearchResult) error
	grpc.ServerStream
}

type dsetCertSearchServer struct {
	grpc.ServerStream
}

func (x *dsetCertSearchServer) Send(m *CertSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_CertValidNamesSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CertValidNamesSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).CertValidNamesSearch(m, &dsetCertValidNamesSearchServer{stream})
}

type Dset_CertValidNamesSearchServer interface {
	Send(*CertValidNamesSearchResult) error
	grpc.ServerStream
}

type dsetCertValidNamesSearchServer struct {
	grpc.ServerStream
}

func (x *dsetCertValidNamesSearchServer) Send(m *CertValidNamesSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainHistory(m, &dsetDomainHistoryServer{stream})
}

type Dset_DomainHistoryServer interface {
	Send(*DomainHistoryResult) error
	grpc.ServerStream
}

type dsetDomainHistoryServer struct {
	grpc.ServerStream
}

func (x *dsetDomainHistoryServer) Send(m *DomainHistoryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainIDDomainSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainIDDomainSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainIDDomainSearch(m, &dsetDomainIDDomainSearchServer{stream})
}

type Dset_DomainIDDomainSearchServer interface {
	Send(*DomainIDDomainSearchResult) error
	grpc.ServerStream
}

type dsetDomainIDDomainSearchServer struct {
	grpc.ServerStream
}

func (x *dsetDomainIDDomainSearchServer) Send(m *DomainIDDomainSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainIDTagSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainIDTagSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainIDTagSearch(m, &dsetDomainIDTagSearchServer{stream})
}

type Dset_DomainIDTagSearchServer interface {
	Send(*DomainIDTagSearchResult) error
	grpc.ServerStream
}

type dsetDomainIDTagSearchServer struct {
	grpc.ServerStream
}

func (x *dsetDomainIDTagSearchServer) Send(m *DomainIDTagSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainIDCaptureTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainIDCaptureTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainIDCaptureTags(m, &dsetDomainIDCaptureTagsServer{stream})
}

type Dset_DomainIDCaptureTagsServer interface {
	Send(*DomainIDCaptureTagsResult) error
	grpc.ServerStream
}

type dsetDomainIDCaptureTagsServer struct {
	grpc.ServerStream
}

func (x *dsetDomainIDCaptureTagsServer) Send(m *DomainIDCaptureTagsResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainSearch(m, &dsetDomainSearchServer{stream})
}

type Dset_DomainSearchServer interface {
	Send(*DomainSearchResult) error
	grpc.ServerStream
}

type dsetDomainSearchServer struct {
	grpc.ServerStream
}

func (x *dsetDomainSearchServer) Send(m *DomainSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_DomainsForIP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainsForIPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).DomainsForIP(m, &dsetDomainsForIPServer{stream})
}

type Dset_DomainsForIPServer interface {
	Send(*DomainsForIPResult) error
	grpc.ServerStream
}

type dsetDomainsForIPServer struct {
	grpc.ServerStream
}

func (x *dsetDomainsForIPServer) Send(m *DomainsForIPResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPHistory(m, &dsetIPHistoryServer{stream})
}

type Dset_IPHistoryServer interface {
	Send(*IPHistoryResult) error
	grpc.ServerStream
}

type dsetIPHistoryServer struct {
	grpc.ServerStream
}

func (x *dsetIPHistoryServer) Send(m *IPHistoryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPLogSearch(m, &dsetIPLogSearchServer{stream})
}

type Dset_IPLogSearchServer interface {
	Send(*IPLogSearchResult) error
	grpc.ServerStream
}

type dsetIPLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetIPLogSearchServer) Send(m *IPLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPSearch(m, &dsetIPSearchServer{stream})
}

type Dset_IPSearchServer interface {
	Send(*IPSearchResult) error
	grpc.ServerStream
}

type dsetIPSearchServer struct {
	grpc.ServerStream
}

func (x *dsetIPSearchServer) Send(m *IPSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_IPsForDomain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPsForDomainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).IPsForDomain(m, &dsetIPsForDomainServer{stream})
}

type Dset_IPsForDomainServer interface {
	Send(*IPsForDomainResult) error
	grpc.ServerStream
}

type dsetIPsForDomainServer struct {
	grpc.ServerStream
}

func (x *dsetIPsForDomainServer) Send(m *IPsForDomainResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_MetaForCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaForCaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).MetaForCapture(m, &dsetMetaForCaptureServer{stream})
}

type Dset_MetaForCaptureServer interface {
	Send(*MetaForCaptureResult) error
	grpc.ServerStream
}

type dsetMetaForCaptureServer struct {
	grpc.ServerStream
}

func (x *dsetMetaForCaptureServer) Send(m *MetaForCaptureResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_MetaSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).MetaSearch(m, &dsetMetaSearchServer{stream})
}

type Dset_MetaSearchServer interface {
	Send(*MetaSearchResult) error
	grpc.ServerStream
}

type dsetMetaSearchServer struct {
	grpc.ServerStream
}

func (x *dsetMetaSearchServer) Send(m *MetaSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_PoliciesForRoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PoliciesForRootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).PoliciesForRoot(m, &dsetPoliciesForRootServer{stream})
}

type Dset_PoliciesForRootServer interface {
	Send(*PoliciesForRootResult) error
	grpc.ServerStream
}

type dsetPoliciesForRootServer struct {
	grpc.ServerStream
}

func (x *dsetPoliciesForRootServer) Send(m *PoliciesForRootResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_PolicyDomainCaptures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PolicyDomainCapturesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).PolicyDomainCaptures(m, &dsetPolicyDomainCapturesServer{stream})
}

type Dset_PolicyDomainCapturesServer interface {
	Send(*PolicyDomainCapturesResult) error
	grpc.ServerStream
}

type dsetPolicyDomainCapturesServer struct {
	grpc.ServerStream
}

func (x *dsetPolicyDomainCapturesServer) Send(m *PolicyDomainCapturesResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_PolicyDomainStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDomainStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsetServer).PolicyDomainStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.netograph.dset.Dset/PolicyDomainStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsetServer).PolicyDomainStats(ctx, req.(*PolicyDomainStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dset_PolicyURLCaptures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PolicyURLCapturesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).PolicyURLCaptures(m, &dsetPolicyURLCapturesServer{stream})
}

type Dset_PolicyURLCapturesServer interface {
	Send(*PolicyURLCapturesResult) error
	grpc.ServerStream
}

type dsetPolicyURLCapturesServer struct {
	grpc.ServerStream
}

func (x *dsetPolicyURLCapturesServer) Send(m *PolicyURLCapturesResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RedirsByDestination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RedirsByDestinationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RedirsByDestination(m, &dsetRedirsByDestinationServer{stream})
}

type Dset_RedirsByDestinationServer interface {
	Send(*RedirsByDestinationResult) error
	grpc.ServerStream
}

type dsetRedirsByDestinationServer struct {
	grpc.ServerStream
}

func (x *dsetRedirsByDestinationServer) Send(m *RedirsByDestinationResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RedirsBySource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RedirsBySourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RedirsBySource(m, &dsetRedirsBySourceServer{stream})
}

type Dset_RedirsBySourceServer interface {
	Send(*RedirsBySourceResult) error
	grpc.ServerStream
}

type dsetRedirsBySourceServer struct {
	grpc.ServerStream
}

func (x *dsetRedirsBySourceServer) Send(m *RedirsBySourceResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RootLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RootLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RootLogSearch(m, &dsetRootLogSearchServer{stream})
}

type Dset_RootLogSearchServer interface {
	Send(*RootLogSearchResult) error
	grpc.ServerStream
}

type dsetRootLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetRootLogSearchServer) Send(m *RootLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_RootsForSatellite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RootsForSatelliteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).RootsForSatellite(m, &dsetRootsForSatelliteServer{stream})
}

type Dset_RootsForSatelliteServer interface {
	Send(*RootsForSatelliteResult) error
	grpc.ServerStream
}

type dsetRootsForSatelliteServer struct {
	grpc.ServerStream
}

func (x *dsetRootsForSatelliteServer) Send(m *RootsForSatelliteResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_SatelliteLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SatelliteLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).SatelliteLogSearch(m, &dsetSatelliteLogSearchServer{stream})
}

type Dset_SatelliteLogSearchServer interface {
	Send(*SatelliteLogSearchResult) error
	grpc.ServerStream
}

type dsetSatelliteLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetSatelliteLogSearchServer) Send(m *SatelliteLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_SatellitesForRoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SatellitesForRootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).SatellitesForRoot(m, &dsetSatellitesForRootServer{stream})
}

type Dset_SatellitesForRootServer interface {
	Send(*SatellitesForRootResult) error
	grpc.ServerStream
}

type dsetSatellitesForRootServer struct {
	grpc.ServerStream
}

func (x *dsetSatellitesForRootServer) Send(m *SatellitesForRootResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Dset_URLLogSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(URLLogSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DsetServer).URLLogSearch(m, &dsetURLLogSearchServer{stream})
}

type Dset_URLLogSearchServer interface {
	Send(*URLLogSearchResult) error
	grpc.ServerStream
}

type dsetURLLogSearchServer struct {
	grpc.ServerStream
}

func (x *dsetURLLogSearchServer) Send(m *URLLogSearchResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Dset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.netograph.dset.Dset",
	HandlerType: (*DsetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCapture",
			Handler:    _Dset_SubmitCapture_Handler,
		},
		{
			MethodName: "CaptureInfo",
			Handler:    _Dset_CaptureInfo_Handler,
		},
		{
			MethodName: "PolicyDomainStats",
			Handler:    _Dset_PolicyDomainStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CaptureLog",
			Handler:       _Dset_CaptureLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CertDomainSearch",
			Handler:       _Dset_CertDomainSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CertIPSearch",
			Handler:       _Dset_CertIPSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CertSearch",
			Handler:       _Dset_CertSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CertValidNamesSearch",
			Handler:       _Dset_CertValidNamesSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainHistory",
			Handler:       _Dset_DomainHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainIDDomainSearch",
			Handler:       _Dset_DomainIDDomainSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainIDTagSearch",
			Handler:       _Dset_DomainIDTagSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainIDCaptureTags",
			Handler:       _Dset_DomainIDCaptureTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainSearch",
			Handler:       _Dset_DomainSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DomainsForIP",
			Handler:       _Dset_DomainsForIP_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPHistory",
			Handler:       _Dset_IPHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPLogSearch",
			Handler:       _Dset_IPLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPSearch",
			Handler:       _Dset_IPSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IPsForDomain",
			Handler:       _Dset_IPsForDomain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaForCapture",
			Handler:       _Dset_MetaForCapture_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaSearch",
			Handler:       _Dset_MetaSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PoliciesForRoot",
			Handler:       _Dset_PoliciesForRoot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PolicyDomainCaptures",
			Handler:       _Dset_PolicyDomainCaptures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PolicyURLCaptures",
			Handler:       _Dset_PolicyURLCaptures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RedirsByDestination",
			Handler:       _Dset_RedirsByDestination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RedirsBySource",
			Handler:       _Dset_RedirsBySource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RootLogSearch",
			Handler:       _Dset_RootLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RootsForSatellite",
			Handler:       _Dset_RootsForSatellite_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SatelliteLogSearch",
			Handler:       _Dset_SatelliteLogSearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SatellitesForRoot",
			Handler:       _Dset_SatellitesForRoot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "URLLogSearch",
			Handler:       _Dset_URLLogSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ngapi/dsetapi/dset.proto",
}
