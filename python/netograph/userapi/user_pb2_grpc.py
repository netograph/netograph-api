# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from netograph.userapi import user_pb2 as userapi_dot_user__pb2


class UserStub(object):
    """Methods that operate at the level of the user account.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TempCapture = channel.unary_unary(
                '/io.netograph.user.User/TempCapture',
                request_serializer=userapi_dot_user__pb2.TempCaptureRequest.SerializeToString,
                response_deserializer=userapi_dot_user__pb2.TempCaptureResult.FromString,
                )
        self.Capture = channel.unary_stream(
                '/io.netograph.user.User/Capture',
                request_serializer=userapi_dot_user__pb2.CaptureRequest.SerializeToString,
                response_deserializer=userapi_dot_user__pb2.CaptureResult.FromString,
                )
        self.Datasets = channel.unary_stream(
                '/io.netograph.user.User/Datasets',
                request_serializer=userapi_dot_user__pb2.DatasetsRequest.SerializeToString,
                response_deserializer=userapi_dot_user__pb2.Dataset.FromString,
                )


class UserServicer(object):
    """Methods that operate at the level of the user account.
    """

    def TempCapture(self, request, context):
        """Request a temporary capture. Temporary captures are not stored in a
        dataset, and the capture assets will be available for download for 24
        hours before being deleted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Capture(self, request, context):
        """Bulk request captures. The capture assets will be available for download
        for 24 hours before being deleted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Datasets(self, request, context):
        """List all datasets to which the authorizing account has access. This
        includes public datasets, which will be marked readonly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TempCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.TempCapture,
                    request_deserializer=userapi_dot_user__pb2.TempCaptureRequest.FromString,
                    response_serializer=userapi_dot_user__pb2.TempCaptureResult.SerializeToString,
            ),
            'Capture': grpc.unary_stream_rpc_method_handler(
                    servicer.Capture,
                    request_deserializer=userapi_dot_user__pb2.CaptureRequest.FromString,
                    response_serializer=userapi_dot_user__pb2.CaptureResult.SerializeToString,
            ),
            'Datasets': grpc.unary_stream_rpc_method_handler(
                    servicer.Datasets,
                    request_deserializer=userapi_dot_user__pb2.DatasetsRequest.FromString,
                    response_serializer=userapi_dot_user__pb2.Dataset.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.netograph.user.User', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class User(object):
    """Methods that operate at the level of the user account.
    """

    @staticmethod
    def TempCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.netograph.user.User/TempCapture',
            userapi_dot_user__pb2.TempCaptureRequest.SerializeToString,
            userapi_dot_user__pb2.TempCaptureResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/io.netograph.user.User/Capture',
            userapi_dot_user__pb2.CaptureRequest.SerializeToString,
            userapi_dot_user__pb2.CaptureResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Datasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/io.netograph.user.User/Datasets',
            userapi_dot_user__pb2.DatasetsRequest.SerializeToString,
            userapi_dot_user__pb2.Dataset.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
